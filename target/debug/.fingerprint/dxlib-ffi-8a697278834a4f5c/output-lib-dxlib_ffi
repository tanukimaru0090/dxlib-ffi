{"message":"failed to resolve: maybe a missing crate `winapi`?","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src\\dxlib.rs","byte_start":269,"byte_end":275,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"use winapi::um::winnt::{TCHAR, LPCTSTR};","highlight_start":5,"highlight_end":11}],"label":"maybe a missing crate `winapi`?","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider adding `extern crate winapi` to use the `winapi` crate","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: maybe a missing crate `winapi`?\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse winapi::um::winnt::{TCHAR, LPCTSTR};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmaybe a missing crate `winapi`?\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: consider adding `extern crate winapi` to use the `winapi` crate\u001b[0m\n\n"}
{"message":"unused import: `std::ffi::CStr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":126,"byte_end":140,"line_start":5,"line_end":5,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use std::ffi::CStr;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":122,"byte_end":141,"line_start":5,"line_end":5,"column_start":1,"column_end":20,"is_primary":true,"text":[{"text":"use std::ffi::CStr;","highlight_start":1,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::ffi::CStr`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::ffi::CStr;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused doc comment","code":{"code":"unused_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":1759,"byte_end":50520,"line_start":53,"line_end":1048,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"extern \"stdcall\" {","highlight_start":1,"highlight_end":19},{"text":"    // 使用必須関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ライブラリの初期化","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_DxLib_Init() -> c_int;","highlight_start":1,"highlight_end":37},{"text":"    /// ライブラリ使用の終了関数","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_DxLib_End() -> c_int;","highlight_start":1,"highlight_end":36},{"text":"    /// ウインドウズのメッセージを処理する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_ProcessMessage() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //算術演算関数","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_VGet(x: f32, y: f32, z: f32) -> VECTOR;","highlight_start":1,"highlight_end":54},{"text":"    pub fn dx_VAdd(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VSub(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VDot(In1: VECTOR, In2: VECTOR) -> f32;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_VCross(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_VScale(In: VECTOR, Scale: f32) -> VECTOR;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VSize(In: VECTOR) -> f32;","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_VSquareSize(In: VECTOR) -> f32;","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_VNorm(In: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":43},{"text":"    pub fn dx_VTransform(InV: VECTOR, InM: MATRIX) -> VECTOR;","highlight_start":1,"highlight_end":62},{"text":"    pub fn dx_VTransformSR(InV: VECTOR, InM: MATRIX) -> VECTOR;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetIdent() -> MATRIX;","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_MGetScale(Scale: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_MGetTranslate(Trans: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":54},{"text":"    pub fn dx_MGetRotX(XAxisRotate: f32) -> MATRIX;","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetRotY(YAxisRotate: f32) -> MATRIX;","highlight_start":1,"highlight_end":52},{"text":"    pub fn dx_MGetRotZ(ZAxisRotate: f32) -> MATRIX;","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetRotAxis(RotateAxis: VECTOR, Rotate: f32) -> MATRIX;","highlight_start":1,"highlight_end":70},{"text":"    pub fn dx_MGetRotVec2(In1: VECTOR, In2: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetAxis1(XAxis: VECTOR, YAxis: VECTOR, ZAxis: VECTOR, Pos: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetAxis2(XAxis: VECTOR, YAxis: VECTOR, ZAxis: VECTOR, Pos: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":93},{"text":"    pub fn dx_MAdd(In1: MATRIX, In2: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_MMult(In1: MATRIX, In2: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":57},{"text":"    pub fn dx_MScale(InM: MATRIX, Scale: f32) -> MATRIX;","highlight_start":1,"highlight_end":57},{"text":"    pub fn dx_MTranspose(InM: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":49},{"text":"    pub fn dx_MInverse(InM: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Live2D 関係関数","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_Live2D_SetCubism4CoreDLLPath(CoreDLLFilePath: *const c_char);","highlight_start":1,"highlight_end":76},{"text":"    pub fn dx_Live2D_RenderBegin();","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_Live2D_RenderEnd();","highlight_start":1,"highlight_end":34},{"text":"    pub fn dx_Live2D_LoadModel(FilePath: *const c_char);","highlight_start":1,"highlight_end":57},{"text":"    pub fn dx_Live2D_DeleteModel(Live2DModelHandle: c_int);","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_Live2D_Model_Update(Live2DModelHandle: c_int, DeltaTimeSeconds: f32);","highlight_start":1,"highlight_end":84},{"text":"    pub fn dx_Live2D_Model_Draw(Live2DModelHandle: c_int);","highlight_start":1,"highlight_end":59},{"text":"    pub fn dx_Live2D_Model_SetTranslate(Live2DModelHandle: c_int, x: f32, y: f32) -> c_int;","highlight_start":1,"highlight_end":92},{"text":"    pub fn dx_Live2D_Model_SetExtendRate(","highlight_start":1,"highlight_end":42},{"text":"        Live2DModelHandle: c_int,","highlight_start":1,"highlight_end":34},{"text":"        ExRateX: f32,","highlight_start":1,"highlight_end":22},{"text":"        ExRateY: f32,","highlight_start":1,"highlight_end":22},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_Live2D_Model_SetRotate(Live2DModelHandle: c_int, RotAngle: f32) -> c_int;","highlight_start":1,"highlight_end":88},{"text":"    pub fn dx_Live2D_Model_StartMotion(","highlight_start":1,"highlight_end":40},{"text":"        Live2DModelHandle: c_int,","highlight_start":1,"highlight_end":34},{"text":"        group: *const c_char,","highlight_start":1,"highlight_end":30},{"text":"        no: c_int,","highlight_start":1,"highlight_end":19},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_Live2D_Model_IsMotionFinished(Live2DModelHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":80},{"text":"    pub fn dx_Live2D_Model_SetExpression(","highlight_start":1,"highlight_end":42},{"text":"        Live2DModelHandle: c_int,","highlight_start":1,"highlight_end":34},{"text":"        expressionID: *const c_char,","highlight_start":1,"highlight_end":37},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    // ３Ｄ関係関数","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_MV1DuplicateModel(SrcMHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":61},{"text":"    pub fn dx_MV1AttachAnim(","highlight_start":1,"highlight_end":29},{"text":"        MHandle: c_int,","highlight_start":1,"highlight_end":24},{"text":"        AnimIndex: c_int,","highlight_start":1,"highlight_end":26},{"text":"        AnimSrcMHandle: c_int,","highlight_start":1,"highlight_end":31},{"text":"        NameCheck: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_MV1SetLoadModelPhysicsWorldGravity(Gravity: f32) -> c_int;","highlight_start":1,"highlight_end":73},{"text":"    pub fn dx_MV1SetLoadModelUsePhysicsMode(PhysicsMode: c_int) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    pub fn dx_MV1GetAnimNum(MHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    pub fn dx_MV1DetachAnim(MHandle: c_int, AttachIndex: c_int) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    pub fn dx_MV1SetAttachAnimTime(MHandle: c_int, AttachIndex: c_int, Time: f32) -> c_int;","highlight_start":1,"highlight_end":92},{"text":"    pub fn dx_MV1GetAttachAnimTotalTime(MHandle: c_int, AttachIndex: c_int) -> f32;","highlight_start":1,"highlight_end":84},{"text":"    pub fn dx_MV1GetAttachAnimTime(MHandle: c_int, AttachIndex: c_int) -> f32;","highlight_start":1,"highlight_end":79},{"text":"    pub fn dx_MV1SetAttachAnimBlendRate(MHandle: c_int, AttachIndex: c_int, Rate: f32) -> c_int;","highlight_start":1,"highlight_end":97},{"text":"    pub fn dx_SetCameraPositionAndTarget_UpVecY(Position: VECTOR, Target: VECTOR) -> c_int;","highlight_start":1,"highlight_end":92},{"text":"    pub fn dx_SetCameraNearFar(Near: f32, Far: f32) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    // Zバッファを使うかどうかのフラグ","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SetUseZBuffer3D(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    // Zバッファへの書き込みするかどうかのフラグ","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_SetWriteZBuffer3D(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデルの読み込み","highlight_start":1,"highlight_end":16},{"text":"    //pub fn dx_MV1LoadModel(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":64},{"text":"    // モデルの描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_MV1DrawModel(MHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_MV1DeleteModel(MHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":55},{"text":"    //　モデルの位置の指定","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_MV1SetPosition(MHandle: c_int, Position: VECTOR) -> c_int;","highlight_start":1,"highlight_end":73},{"text":"    pub fn dx_MV1SetScale(MHandle: c_int, Scale: VECTOR) -> c_int;","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawLine3D(Pos1: VECTOR, Pos2: VECTOR, Color: Color) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    pub fn dx_DrawTriangle3D(","highlight_start":1,"highlight_end":30},{"text":"        Pos1: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos2: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos3: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawSphere3D(","highlight_start":1,"highlight_end":28},{"text":"        CenterPos: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        r: f32,","highlight_start":1,"highlight_end":16},{"text":"        DivNum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawCapsule3D(","highlight_start":1,"highlight_end":29},{"text":"        Pos1: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos2: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        r: f32,","highlight_start":1,"highlight_end":16},{"text":"        DivNum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawCone3D(","highlight_start":1,"highlight_end":26},{"text":"        TopPos: VECTOR,","highlight_start":1,"highlight_end":24},{"text":"        BottomPos: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        r: f32,","highlight_start":1,"highlight_end":16},{"text":"        DivNum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawBillboard3D(","highlight_start":1,"highlight_end":31},{"text":"        Pos: VECTOR,","highlight_start":1,"highlight_end":21},{"text":"        cx: f32,","highlight_start":1,"highlight_end":17},{"text":"        cy: f32,","highlight_start":1,"highlight_end":17},{"text":"        Size: f32,","highlight_start":1,"highlight_end":19},{"text":"        Angle: f32,","highlight_start":1,"highlight_end":20},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_DrawPolygon3D(","highlight_start":1,"highlight_end":29},{"text":"        Vertex: *mut VERTEX3D,","highlight_start":1,"highlight_end":31},{"text":"        PolygonNum: c_int,","highlight_start":1,"highlight_end":27},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 図形描画関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 線を描画","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_DrawLine(x1: c_int, y1: c_int, x2: c_int, y2: c_int, color: Color) -> c_int;","highlight_start":1,"highlight_end":91},{"text":"    /// 線を描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawLineAA(x1: f32, y1: f32, x2: f32, y2: f32, color: Color) -> c_int;","highlight_start":1,"highlight_end":85},{"text":"    /// 四角を描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_DrawBox(","highlight_start":1,"highlight_end":23},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 四角を描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_DrawBoxAA(","highlight_start":1,"highlight_end":25},{"text":"        x1: f32,","highlight_start":1,"highlight_end":17},{"text":"        y1: f32,","highlight_start":1,"highlight_end":17},{"text":"        x2: f32,","highlight_start":1,"highlight_end":17},{"text":"        y2: f32,","highlight_start":1,"highlight_end":17},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 円の描画","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_DrawCircle(x: c_int, y: c_int, r: c_int, color: Color, fill_flag: c_int) -> c_int;","highlight_start":1,"highlight_end":97},{"text":"    /// 円の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawCircleAA(","highlight_start":1,"highlight_end":28},{"text":"        x: f32,","highlight_start":1,"highlight_end":16},{"text":"        y: f32,","highlight_start":1,"highlight_end":16},{"text":"        r: f32,","highlight_start":1,"highlight_end":16},{"text":"        pos_num: c_int,","highlight_start":1,"highlight_end":24},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 楕円の描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_DrawOval(","highlight_start":1,"highlight_end":24},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        rx: c_int,","highlight_start":1,"highlight_end":19},{"text":"        ry: c_int,","highlight_start":1,"highlight_end":19},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 楕円の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_DrawOvalAA(","highlight_start":1,"highlight_end":26},{"text":"        x: f32,","highlight_start":1,"highlight_end":16},{"text":"        y: f32,","highlight_start":1,"highlight_end":16},{"text":"        rx: f32,","highlight_start":1,"highlight_end":17},{"text":"        ry: f32,","highlight_start":1,"highlight_end":17},{"text":"        posnum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 三角形の描画","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawTriangle(","highlight_start":1,"highlight_end":28},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x3: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y3: c_int,","highlight_start":1,"highlight_end":19},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 三角形の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawTriangleAA(","highlight_start":1,"highlight_end":30},{"text":"        x1: f32,","highlight_start":1,"highlight_end":17},{"text":"        y1: f32,","highlight_start":1,"highlight_end":17},{"text":"        x2: f32,","highlight_start":1,"highlight_end":17},{"text":"        y2: f32,","highlight_start":1,"highlight_end":17},{"text":"        x3: f32,","highlight_start":1,"highlight_end":17},{"text":"        y3: f32,","highlight_start":1,"highlight_end":17},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 点を描画する","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawPixel(x: c_int, y: c_int, Color: Color) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// 指定点の色を取得","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_GetPixel(x: c_int, y: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // グラフィックデータ制御関数","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 画像ファイルを読みこんで画面に表示する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_LoadGraphScreen() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"    /// 画像ファイルのメモリへの読みこみ、及び動画ファイルのロード","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_LoadGraph() -> c_int;","highlight_start":1,"highlight_end":38},{"text":"    /// 画像ファイルのメモリへの分割読みこみ","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_LoadDivGraph(FileName:*const c_char,AllNum:c_int,XNum:c_int,YNum:c_int,XSize:c_int,YSize:c_int,HandleBuf:*mut c_int) -> c_int;","highlight_start":1,"highlight_end":143},{"text":"    /// 空のグラフィックを作成する","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_MakeGraph(SizeX: c_int, SizeY: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// 描画対象にできるグラフィックを作成する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_MakeScreen(SizeX: c_int, SizeY: c_int, UseAlphaChannel: c_int) -> c_int;","highlight_start":1,"highlight_end":87},{"text":"    /// 描画対象にできるグラフィックのマルチサンプリング設定を行う","highlight_start":1,"highlight_end":38},{"text":"    pub fn dx_SetCreateDrawValidGraphMultiSample(Samples: c_int, Quality: c_int) -> c_int;","highlight_start":1,"highlight_end":91},{"text":"    /// 作成するグラフィックのビット深度を設定する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_SetCreateGraphColorBitDepth(BitDepth: c_int) -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// 描画可能な浮動小数点型のグラフィックを作成するかどうかの設定を行う","highlight_start":1,"highlight_end":42},{"text":"    pub fn dx_SetDrawValidFloatTypeGraphCreateFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    /// 作成する描画可能なグラフィックのチャンネル数の設定を行う","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_SetCreateDrawValidGraphChannelNum(ChannelNum: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    /// 読み込み時に画像を乗算済みα画像に変換するかを設定する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetUsePremulAlphaConvertLoad(UseFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// メモリに読みこんだグラフィックの描画","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawGraph(x: c_int, y: c_int, GrHandle: c_int, TransFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":89},{"text":"    // メモリに読み込んだグラフィックの描画　(float版)","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_DrawGraphF(x: f32, y: f32, GrHandle: c_int, TransFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":86},{"text":"    /// メモリに読みこんだグラフィックのＬＲ反転描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawTurnGraph(","highlight_start":1,"highlight_end":29},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読みこんだグラフィックの拡大縮小描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawExtendGraph(","highlight_start":1,"highlight_end":31},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読みこんだグラフィックの回転描画","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawRotaGraph(","highlight_start":1,"highlight_end":29},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        ex_rate: f64,","highlight_start":1,"highlight_end":22},{"text":"        angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        gr_handle: c_int,","highlight_start":1,"highlight_end":26},{"text":"        trans_flag: c_int,","highlight_start":1,"highlight_end":27},{"text":"        turn_flag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読みこんだグラフィックの回転描画(回転中心指定あり)","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_DrawRotaGraph2(","highlight_start":1,"highlight_end":30},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        cx: c_int,","highlight_start":1,"highlight_end":19},{"text":"        cy: c_int,","highlight_start":1,"highlight_end":19},{"text":"        ExtRate: f64,","highlight_start":1,"highlight_end":22},{"text":"        Angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"        TurnFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読みこんだグラフィックの回転描画(回転中心指定あり、縦横拡大率別指定)","highlight_start":1,"highlight_end":48},{"text":"    pub fn dx_DrawRotaGraph3(","highlight_start":1,"highlight_end":30},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        cx: c_int,","highlight_start":1,"highlight_end":19},{"text":"        cy: c_int,","highlight_start":1,"highlight_end":19},{"text":"        ExtRateX: f64,","highlight_start":1,"highlight_end":23},{"text":"        ExtRateY: f64,","highlight_start":1,"highlight_end":23},{"text":"        Angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"        TurnFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読みこんだグラフィックの自由変形描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawModiGraph(","highlight_start":1,"highlight_end":29},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x3: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y3: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x4: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y4: c_int,","highlight_start":1,"highlight_end":19},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// グラフィックの指定矩形部分のみを描画","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawRectGraph(","highlight_start":1,"highlight_end":29},{"text":"        DestX: c_int,","highlight_start":1,"highlight_end":22},{"text":"        DestY: c_int,","highlight_start":1,"highlight_end":22},{"text":"        SrcX: c_int,","highlight_start":1,"highlight_end":21},{"text":"        SrcY: c_int,","highlight_start":1,"highlight_end":21},{"text":"        Width: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Height: c_int,","highlight_start":1,"highlight_end":23},{"text":"        GraphHandle: c_int,","highlight_start":1,"highlight_end":28},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"        TurnFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 指定のグラフィックの指定部分だけを抜き出して新たなグラフィックを作成する","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_DerivationGraph(","highlight_start":1,"highlight_end":31},{"text":"        SrcX: c_int,","highlight_start":1,"highlight_end":21},{"text":"        SrcY: c_int,","highlight_start":1,"highlight_end":21},{"text":"        Width: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Height: c_int,","highlight_start":1,"highlight_end":23},{"text":"        SrcGraphHandle: c_int,","highlight_start":1,"highlight_end":31},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 描画先に設定されているグラフィック領域から指定領域のグラフィックを読みこむ","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_GetDrawScreenGraph(","highlight_start":1,"highlight_end":34},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// グラフィックのサイズを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetGraphSize() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// 読みこんだグラフィックデータをすべて削除する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_InitGraph() -> c_int;","highlight_start":1,"highlight_end":36},{"text":"    /// 指定のグラフィックをメモリ上から削除する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DeleteGraph(GrHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// 描画モードをセットする","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SetDrawMode(DrawMode: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// 描画の際のブレンドモードをセットする","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_SetDrawBlendMode(blend_mode: c_int, pal: c_int) -> c_int;","highlight_start":1,"highlight_end":72},{"text":"    /// 描画輝度をセット","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_SetDrawBright(RedBright: c_int, GreenBright: c_int, BlueBright: c_int) -> c_int;","highlight_start":1,"highlight_end":95},{"text":"    /// グラフィックに設定する透過色をセットする","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_SetTransColor(Red: c_int, Green: c_int, Blue: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    // 画像ファイルからブレンド画像を読み込む","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_LoadBlendGraph() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// ブレンド画像と通常画像を合成して描画する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawBlendGraph(","highlight_start":1,"highlight_end":30},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"        BlendGraph: c_int,","highlight_start":1,"highlight_end":27},{"text":"        BorderParam: c_int,","highlight_start":1,"highlight_end":28},{"text":"        BorderRange: c_int,","highlight_start":1,"highlight_end":28},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 画像にフィルター処理を施す","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GraphFilter() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// 画像にフィルター処理を施す( 出力先画像指定版 )","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GraphFilterBlt() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// 画像にフィルター処理を施す( 出力先画像、使用矩形指定版 )","highlight_start":1,"highlight_end":39},{"text":"    //pub fn dx_GraphFilterRectBlt() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// 二つの画像を特殊効果付きでブレンドする","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GraphBlend() -> c_int;","highlight_start":1,"highlight_end":39},{"text":"    /// 二つの画像を特殊効果付きでブレンドする( 出力先画像指定版 )","highlight_start":1,"highlight_end":40},{"text":"    //pub fn dx_GraphBlendBlt() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// 二つの画像を特殊効果付きでブレンドする( 出力先画像、使用矩形指定版 )","highlight_start":1,"highlight_end":45},{"text":"    //pub fn dx_GraphBlendRectBlt() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 文字描画関係関数","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字列を描画する","highlight_start":1,"highlight_end":17},{"text":"    //  pub fn dx_DrawString(x: c_int, y: c_int, string: *const c_char, color: Color) -> c_int;","highlight_start":1,"highlight_end":96},{"text":"    /// 書式付き文字列を描画する","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_DrawFormatString(x:c_int,y:c_int,color:Color,format:*const c_char, ...) -> c_int;","highlight_start":1,"highlight_end":98},{"text":"    /// DrawString で描画される文字列の幅(ドット単位)を得る","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_GetDrawStringWidth() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// DrawFormatString 関数書式付き文字列の描画幅(ドット単位)を得る","highlight_start":1,"highlight_end":49},{"text":"    //pub fn dx_GetDrawFormatStringWidth() -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// 描画する文字列のサイズをセットする","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetFontSize(size: c_int) -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// 描画する文字列の文字の太さをセットする","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetFontThickness(TinckPal: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// 描画するフォントを変更する","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_ChangeFont(name: *const c_char) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// 文字列描画に使用するフォントのタイプを変更する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_ChangeFontType(FontType: c_int) -> c_int;","highlight_start":1,"highlight_end":56},{"text":"    /// 新しいフォントデータを作成","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_CreateFontToHandle(FontName: *const c_char,Size: c_int,Thick: c_int,FontType: c_int) -> c_int;","highlight_start":1,"highlight_end":111},{"text":"    /// ＤＸフォントデータファイルを読み込む","highlight_start":1,"highlight_end":27},{"text":"    // pub fn dx_LoadFontDataToHandle(FileName: *const c_char, EdgeSize: c_int) -> c_int;","highlight_start":1,"highlight_end":90},{"text":"    /// フォントデータを削除する","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_DeleteFontToHandle(FontHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// 作成するフォントデータを『乗算済みα』用にするかどうかを設定する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_SetFontCacheUsePremulAlphaFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// 指定のフォントデータで文字列を描画する","highlight_start":1,"highlight_end":28},{"text":"    // pub fn dx_DrawStringToHandle(x: c_int,y: c_int,String: *const c_char,Color: Color,FontHandle: c_int,) -> c_int;","highlight_start":1,"highlight_end":119},{"text":"    /// 指定のフォントデータで書式付き文字列を描画する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_DrawFormatStringToHandle() -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// 指定のフォントデータで描画する文字列の幅を得る","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_GetDrawStringWidthToHandle(String:*const c_char,StrLen:c_int, FontHandle:c_int) -> c_int;","highlight_start":1,"highlight_end":106},{"text":"    /// 指定のフォントデータで書式付き文字列の描画幅を得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetDrawFormatStringWidthToHandle() -> c_int;","highlight_start":1,"highlight_end":61},{"text":"    /// 指定のフォントデータの情報を得る","highlight_start":1,"highlight_end":25},{"text":"    //pub fn dx_GetFontStateToHandle(FontName:*const c_char,Size:*mut c_int,Thick:*mut c_int,FontHandle:c_int) -> c_int;","highlight_start":1,"highlight_end":121},{"text":"    /// フォントデータを全て初期化する","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_InitFontToHandle() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 簡易画面出力関数","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //pub fn dx_() -> c_int;","highlight_start":1,"highlight_end":29},{"text":"    // 簡易文字列描画","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //pub unsafe fn  dx_printfDx(arg: T, arg2: U, mut args: ...) -> c_int;","highlight_start":1,"highlight_end":75},{"text":"    /// 簡易画面出力履歴をクリアする","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_clsDx() -> c_int;","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // その他画面操作系関数","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 画面モードの変更","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_SetGraphMode(","highlight_start":1,"highlight_end":28},{"text":"        SizeX: c_int,","highlight_start":1,"highlight_end":22},{"text":"        SizeY: c_int,","highlight_start":1,"highlight_end":22},{"text":"        ColorBitNum: c_int,","highlight_start":1,"highlight_end":28},{"text":"        RefreshRate: c_int,","highlight_start":1,"highlight_end":28},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// フルスクリーンモード時の解像度モードを設定する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_SetFullScreenResolutionMode(ResolutionMode: c_int) -> c_int;","highlight_start":1,"highlight_end":75},{"text":"    /// フルスクリーンモード時の画面拡大モードを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetFullScreenScalingMode(ScalingMode: c_int) -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// 現在の画面の大きさとカラービット数を得る","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_GetScreenState(SizeX:*mut c_int,SizeY:*mut c_int,ColorBitDepth:*mut c_int) -> c_int;","highlight_start":1,"highlight_end":101},{"text":"    /// 描画可能領域のセット","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_SetDrawArea(x1: c_int, y1: c_int, x2: c_int, y2: c_int) -> c_int;","highlight_start":1,"highlight_end":80},{"text":"    /// 画面に描かれたものを消去する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_ClearDrawScreen() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"    /// 画面の背景色を設定する","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SetBackgroundColor(Red: c_int, Green: c_int, Blue: c_int) -> c_int;","highlight_start":1,"highlight_end":82},{"text":"    /// 色コードを取得する","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_GetColor(Red: c_int, Green: c_int, Blue: c_int) -> Color;","highlight_start":1,"highlight_end":72},{"text":"    pub fn dx_GetColorU8(Red: c_int, Green: c_int, Blue: c_int, Alpha: c_int) -> COLOR_U8;","highlight_start":1,"highlight_end":91},{"text":"    /// 描画先グラフィック領域の指定","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetDrawScreen(DrawScreen: c_int) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// フリップ関数、画面の裏ページ(普段は表示されていない)の内容を表ページ(普段表示されている)に反映する","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_ScreenFlip() -> c_int;","highlight_start":1,"highlight_end":37},{"text":"    /// 画面のフルスクリーンアンチエイリアスモードの設定をする","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetFullSceneAntiAliasingMode(Samples: c_int, Quality: c_int) -> c_int;","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 動画関係関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 動画ファイルの再生","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_PlayMovie(FileName:*const c_char,ExRate:c_int,PlayType:c_int) -> c_int;","highlight_start":1,"highlight_end":88},{"text":"    /// ムービーグラフィックの動画の再生を開始する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_PlayMovieToGraph(GraphHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":61},{"text":"    /// ムービーグラフィックの動画再生を一時停止する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_PauseMovieToGraph(GraphHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// ムービーグラフィックの動画の再生位置を変更する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_SeekMovieToGraph(GraphHandle: c_int, Time: c_int) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    /// ムービーグラフィックの動画の再生位置を得る","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_TellMovieToGraph(GraphHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":61},{"text":"    /// ムービーグラフィックの動画の再生状態を得る","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_GetMovieStateToGraph(GraphHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // マスク関係関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// マスク画面を作成する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_CreateMaskScreen() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// マスク画面を削除する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_DeleteMaskScreen() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// マスクデータを画像ファイル(BMP.JPEG.PNG)から構築する","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_LoadMask(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":60},{"text":"    /// マスクデータを画像ファイル(BMP.JPEG.PNG)から分割構築する","highlight_start":1,"highlight_end":44},{"text":"    //pub fn dx_LoadDivMask() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// マスクデータをマスク画面に描画する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_DrawMask(x: c_int, y: c_int, MaskHandle: c_int, TransMode: c_int) -> c_int;","highlight_start":1,"highlight_end":90},{"text":"    /// 指定のマスク画面領域を指定のマスクデータをタイル上に並べて埋める","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_DrawFillMask(x1: c_int, y1: c_int, x2: c_int, y2: c_int, MaskHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":100},{"text":"    /// マスクデータを削除","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_DeleteMask(MaskHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    /// マスクデータを初期化する","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_InitMask() -> c_int;","highlight_start":1,"highlight_end":35},{"text":"    /// マスク画面を指定の色で塗りつぶす","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_FillMaskScreen(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":52},{"text":"    /// マスク画面の有効の有無を変更","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetUseMaskScreenFlag(ValidFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":63},{"text":"    /// 空のマスクデータの作成","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_MakeMask(Width: c_int, Height: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// マスクデータの大きさを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetMaskSize(WidthBuf:*mut c_int,HeightBuf:*mut c_int,MaskHandle:c_int) -> c_int;","highlight_start":1,"highlight_end":97},{"text":"    /// マスクのデータをマスクデータ領域に転送する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_SetDataToMask(","highlight_start":1,"highlight_end":29},{"text":"        Width: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Height: c_int,","highlight_start":1,"highlight_end":23},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"        MaskHandle: c_int,","highlight_start":1,"highlight_end":27},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// マスクのデータをマスク画面に直接描画する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawMaskToDirectData(","highlight_start":1,"highlight_end":36},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        Width: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Height: c_int,","highlight_start":1,"highlight_end":23},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"        TransMode: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// マスクのデータをタイル上に並べた形で直接マスク画面全体に描画する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_DrawFillMaskToDirectData(","highlight_start":1,"highlight_end":40},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        Width: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Height: c_int,","highlight_start":1,"highlight_end":23},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 入力関係の関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ジョイパッドが接続されている数を取得する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_GetJoypadNum() -> c_int;","highlight_start":1,"highlight_end":39},{"text":"    /// ジョイパッドの入力状態を得る","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_GetJoypadInputState(InputType: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// ジョイパッドのアナログ的なレバー入力情報を得る","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_GetJoypadAnalogInput(XBuf: *mut c_int, YBuf: *mut c_int, InputType: c_int) -> c_int;","highlight_start":1,"highlight_end":99},{"text":"    /// ジョイパッドのDirectInputから取得できる情報を得る","highlight_start":1,"highlight_end":39},{"text":"    //pub fn dx_GetJoypadDirectInputState() -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    /// ジョイパッドのXInputから取得できる情報を得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetJoypadXInputState() -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// ジョイパッドの方向入力の無効範囲を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_SetJoypadDeadZone() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"    /// ジョイパッドの振動を開始する","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_StartJoypadVibration(","highlight_start":1,"highlight_end":36},{"text":"        InputType: c_int,","highlight_start":1,"highlight_end":26},{"text":"        Power: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Time: c_int,","highlight_start":1,"highlight_end":21},{"text":"        EffectIndex: c_int,","highlight_start":1,"highlight_end":28},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// ジョイパッドの振動を停止する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_StopJoypadVibration() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// マウスカーソルの表示設定フラグのセット","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetMouseDispFlag(DispFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// マウスカーソルの位置を取得する","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_GetMousePoint(XBuf: *mut c_int, YBuf: *mut c_int) -> c_int;","highlight_start":1,"highlight_end":76},{"text":"    /// マウスカーソルの位置をセットする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_SetMousePoint(PointX: c_int, PointY: c_int) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// マウスのボタンの状態を得る","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_GetMouseInput() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// マウスのボタンが押されたり離されたりした履歴を取得する","highlight_start":1,"highlight_end":36},{"text":"    //pub fn dx_GetMouseInputLog2(Button:*mut c_int,ClickX:*mut c_int,ClickY:*mut c_int,LogType:*mut c_int, LogDelete:c_int ) -> c_int;","highlight_start":1,"highlight_end":136},{"text":"    /// マウスホイールの回転量を得る","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_GetMouseWheelRotVol() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// タッチされている箇所の数を取得する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_GetTouchInputNum() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// タッチされている箇所の情報を取得する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_GetTouchInput(InputNo:c_int,PositionX:*mut c_int,PositionY:*mut c_int,ID:*mut c_int,Device:*mut c_int) -> c_int;","highlight_start":1,"highlight_end":129},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// すべてのキーの押下状態を取得","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_CheckHitKeyAll(check_type: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// 特定キーの入力状態を得る","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_CheckHitKey(key_code: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// キーボードのすべてのキーの押下状態を取得する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_GetHitKeyStateAll(key_state_buf: *mut c_char) -> c_int;","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字入力バッファに溜まった文字データから１文字取得する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_GetInputChar(DeleteFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":56},{"text":"    /// 文字入力バッファに溜まった文字データから１文字取得する、バッファになにも文字コードがない場合はキーが押されるまで待つ","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_GetInputCharWait(DeleteFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":60},{"text":"    /// 文字入力バッファをクリアする","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_ClearInputCharBuf() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// キーボードによる文字列の入力","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_KeyInputString(","highlight_start":1,"highlight_end":30},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        CharMaxLength: c_int,","highlight_start":1,"highlight_end":30},{"text":"        StrBuffer: *mut c_char,","highlight_start":1,"highlight_end":32},{"text":"        CancelValidFlag: c_int,","highlight_start":1,"highlight_end":32},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// キーボードによる半角文字列のみの入力","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_KeyInputSingleCharString(","highlight_start":1,"highlight_end":40},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        CharMaxLength: c_int,","highlight_start":1,"highlight_end":30},{"text":"        StrBuffer: *mut c_char,","highlight_start":1,"highlight_end":32},{"text":"        CancelValidFlag: c_int,","highlight_start":1,"highlight_end":32},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// キーボードによる数値の入力","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_KeyInputNumber(","highlight_start":1,"highlight_end":30},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        MaxNum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        MinNum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        CancelValidFlag: c_int,","highlight_start":1,"highlight_end":32},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// KeysnputString系 関数使用時の文字の各色を変更する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_SetKeyInputStringColor(","highlight_start":1,"highlight_end":38},{"text":"        NmlStr: u32,","highlight_start":1,"highlight_end":21},{"text":"        NmlCur: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMEStrBack: u32,","highlight_start":1,"highlight_end":25},{"text":"        IMECur: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMELine: u32,","highlight_start":1,"highlight_end":22},{"text":"        IMESelectStr: u32,","highlight_start":1,"highlight_end":27},{"text":"        IMEModeStr: u32,","highlight_start":1,"highlight_end":25},{"text":"        NmlStrE: u32,","highlight_start":1,"highlight_end":22},{"text":"        IMESelectStrE: u32,","highlight_start":1,"highlight_end":28},{"text":"        IMEModeStrE: u32,","highlight_start":1,"highlight_end":26},{"text":"        IMESelectWinE: u32,","highlight_start":1,"highlight_end":28},{"text":"        IMESelectWinF: u32,","highlight_start":1,"highlight_end":28},{"text":"        SelectStrBackColor: u32,","highlight_start":1,"highlight_end":33},{"text":"        SelectStrColor: u32,","highlight_start":1,"highlight_end":29},{"text":"        SelectStrEdgeColor: u32,","highlight_start":1,"highlight_end":33},{"text":"        IMEStr: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMEStrE: u32,","highlight_start":1,"highlight_end":22},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 新しいキー入力データの作成","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_MakeKeyInput(","highlight_start":1,"highlight_end":28},{"text":"        MaxStrLength: c_int,","highlight_start":1,"highlight_end":29},{"text":"        CancelValidFlag: c_int,","highlight_start":1,"highlight_end":32},{"text":"        SingleCharOnlyFlag: c_int,","highlight_start":1,"highlight_end":35},{"text":"        NumCharOnlyFlag: c_int,","highlight_start":1,"highlight_end":32},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// キー入力データの削除","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_DeleteKeyInput(InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":59},{"text":"    /// すべてのキー入力データの削除","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_InitKeyInput() -> c_int;","highlight_start":1,"highlight_end":39},{"text":"    /// 指定のキー入力をアクティブにする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_SetActiveKeyInput(InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// 入力が終了しているか取得する","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_CheckKeyInput(InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// キー入力中データの描画","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_DrawKeyInputString(x: c_int, y: c_int, InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":83},{"text":"    /// 入力モード文字列を描画する","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_DrawKeyInputModeString(x: c_int, y: c_int) -> c_int;","highlight_start":1,"highlight_end":67},{"text":"    /// キー入力データに指定の文字列をセットする","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_SetKeyInputString() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"    /// キー入力データに指定の数値を文字に置き換えてセットする","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetKeyInputNumber(Number: c_int, InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    /// 入力データの文字列を取得する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_GetKeyInputString() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"    /// 入力データの文字列を数値として取得する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_GetKeyInputNumber(InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 音利用関数","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 音ファイルを再生する","highlight_start":1,"highlight_end":19},{"text":"    //pub fn dx_PlaySoundFile(FileName:&str,PlayType:c_int) -> c_int;","highlight_start":1,"highlight_end":70},{"text":"    /// 音ファイルが再生中か調べる","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_CheckSoundFile() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// 音ファイルの再生を止める","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_StopSoundFile() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// 音ファイルをメモリに読みこむ","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_LoadSoundMem() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// メモリに読みこんだ音データを再生する","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_PlaySoundMem(SoundHandle: c_int, PlayType: c_int, TopPositionFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":98},{"text":"    /// メモリに読みこんだ音データが再生中か調べる","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_CheckSoundMem(SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// メモリに読み込んだ音データの再生を止める","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_StopSoundMem(SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// メモリに読みこんだ音データを削除する","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DeleteSoundMem(SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":59},{"text":"    /// メモリに読みこんだ音データをすべて消去する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_InitSoundMem() -> c_int;","highlight_start":1,"highlight_end":39},{"text":"    /// メモリに読みこんだ音データの再生にパンを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_ChangePanSoundMem(PanPal: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    /// メモリに読みこんだ音データの再生にボリュームを設定する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_ChangeVolumeSoundMem(VolumePal: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":83},{"text":"    /// メモリに読みこんだ音データの次の再生にのみ使用するパンを設定する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_ChangeNextPlayPanSoundMem(PanPal: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":85},{"text":"    /// メモリに読みこんだ音データの次の再生にのみ使用するボリュームを設定する","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_ChangeNextPlayVolumeSoundMem(VolumePal: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":91},{"text":"    /// メモリに読み込んだ音データの再生周波数を設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetFrequencySoundMem(FrequencyPal: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":86},{"text":"    /// メモリに読み込んだ音データのループ位置を設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetLoopPosSoundMem(LoopTime: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":80},{"text":"    /// メモリに読み込んだ音データのループ位置を設定する(サンプル位置指定)","highlight_start":1,"highlight_end":43},{"text":"    pub fn dx_SetLoopSamplePosSoundMem(LoopSamplePosition: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":96},{"text":"    /// メモリに読み込んだ音データの再生位置をサンプル単位で変更する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_SetCurrentPositionSoundMem(SamplePosition: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":94},{"text":"    /// 既にメモリに読み込んである音データを使用するサウンドハンドルを新たに作成する( 非ストリームサウンドのみ )","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_DuplicateSoundMem(SrcSoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":65},{"text":"    /// 作成するメモリに読み込んだ音データのピッチ( 音の長さを変えずに音程を変更する )レートを設定する","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_SetCreateSoundPitchRate(Cents: f32) -> c_int;","highlight_start":1,"highlight_end":60},{"text":"    /// 作成するメモリに読み込んだ音データのタイムストレッチ( 音程を変えずに音の長さを変更する )レートを設定する","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_SetCreateSoundTimeStretchRate(Rate: f32) -> c_int;","highlight_start":1,"highlight_end":65},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の再生位置を設定する","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_Set3DPositionSoundMem(Position: VECTOR, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":84},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の音が聞こえる距離を設定する","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_Set3DRadiusSoundMem(Radius: f32, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の移動速度を設定する","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_Set3DVelocitySoundMem(Velocity: VECTOR, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":84},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の再生位置を設定する","highlight_start":1,"highlight_end":51},{"text":"    pub fn dx_SetNextPlay3DPositionSoundMem(Position: VECTOR, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":92},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の音が聞こえる距離を設定する","highlight_start":1,"highlight_end":55},{"text":"    pub fn dx_SetNextPlay3DRadiusSoundMem(Radius: f32, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":85},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の移動速度を設定する","highlight_start":1,"highlight_end":51},{"text":"    pub fn dx_SetNextPlay3DVelocitySoundMem(Velocity: VECTOR, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":92},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータを設定する","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_Set3DReverbParamSoundMem(","highlight_start":1,"highlight_end":40},{"text":"        SOUND3D_REVERB_PARAM: *const XAUDIO2FX_REVERB_PARAMETERS,","highlight_start":1,"highlight_end":66},{"text":"        SoundHandle: c_int,","highlight_start":1,"highlight_end":28},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータをプリセットを使用して設定する","highlight_start":1,"highlight_end":60},{"text":"    //pub fn dx_Set3DPresetReverbParamSoundMem() -> c_int;","highlight_start":1,"highlight_end":59},{"text":"    /// ３Ｄサウンド用のプリセットのリバーブエフェクトパラメータを取得する","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_Get3DPresetReverbParamSoundMem() -> c_int;","highlight_start":1,"highlight_end":59},{"text":"    /// 全てのメモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータを設定する","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_Set3DReverbParamSoundMemAll() -> c_int;","highlight_start":1,"highlight_end":56},{"text":"    /// 全てのメモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータをプリセットを使用して設定する","highlight_start":1,"highlight_end":63},{"text":"    //pub fn dx_Set3DPresetReverbParamSoundMemAll() -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// 次に作成するメモリに読み込む音データを３Ｄサウンド用にするかどうかを設定する","highlight_start":1,"highlight_end":47},{"text":"    //pub fn dx_SetCreate3DSoundFlag() -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// サウンドの再生にXAudio2を使用するかどうかを設定する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_SetEnableXAudioFlag() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"    /// ３Ｄ空間の１メートルに相当する距離を設定する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_Set3DSoundOneMetre() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// ３Ｄサウンドのリスナーの位置とリスナーの前方位置を設定する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_Set3DSoundListenerPosAndFrontPos_UpVecY() -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// ３Ｄサウンドのリスナーの位置とリスナーの前方位置とリスナーの上方向を設定する","highlight_start":1,"highlight_end":47},{"text":"    //pub fn dx_Set3DSoundListenerPosAndFrontPosAndUpVec() -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// ３Ｄサウンドのリスナーの移動速度を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_Set3DSoundListenerVelocity() -> c_int;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 音楽再生関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルを演奏(再生)する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_PlayMusic(FileName:*const c_char ,PlayType:c_int) -> c_int;","highlight_start":1,"highlight_end":76},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルが演奏(再生)中かの情報を取得する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_CheckMusic() -> c_int;","highlight_start":1,"highlight_end":37},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルの演奏(再生)停止","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_StopMusic() -> c_int;","highlight_start":1,"highlight_end":36},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルの演奏(再生)の音量を設定する","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_SetVolumeMusic(Volume: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ウエイト関係の関数","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 指定の時間だけ処理をとめる","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_WaitTimer(WaitTime: c_int) -> c_int;","highlight_start":1,"highlight_end":51},{"text":"    /// ディスプレイの垂直同期信号を指定回数待つ","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_WaitVSync() -> c_int;","highlight_start":1,"highlight_end":38},{"text":"    /// キーの入力待ち","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_WaitKey() -> c_int;","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 時間関係の関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ミリ秒単位の精度を持つカウンタの現在値を得る","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_GetNowCount() -> c_int;","highlight_start":1,"highlight_end":38},{"text":"    /// GetNowCountの高精度バージョン","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_GetNowHiPerformanceCount() -> i64;","highlight_start":1,"highlight_end":49},{"text":"    /// 現在時刻を取得する","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_GetDateTime() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 乱数取得関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 乱数を取得する","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_GetRand(rand_max: c_int) -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// 乱数の初期値を設定する","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SRand(seed: c_int) -> c_int;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ウインドウモード関係","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ウインドウモード・フルスクリーンモードの変更を行う","highlight_start":1,"highlight_end":34},{"text":"    pub fn dx_ChangeWindowMode(flag: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    /// ウインドウのタイトルを変更する","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_SetMainWindowText(WindowText: *const c_char) -> c_int;","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ウインドウのアイコンを変更する","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SetWindowIconID(ID: c_int) -> c_int;","highlight_start":1,"highlight_end":51},{"text":"    /// ウインドウモードの時にウインドウのサイズを自由に変更出来るようにするかどうかを設定する","highlight_start":1,"highlight_end":52},{"text":"    pub fn dx_SetWindowSizeChangeEnableFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":67},{"text":"    /// ウインドウモードの時のウインドウの大きさと描画画面の大きさの比率を設定する","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_SetWindowSizeExtendRate(ExRateX: f64, ExRateY: f64) -> c_int;","highlight_start":1,"highlight_end":76},{"text":"    // 通信関係","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 他のマシンに接続する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_ConnectNetWork(IPData: IPDATA, Port: c_int) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// 接続を終了する","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_CloseNetWork(NetHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":55},{"text":"    /// 接続を受け付けられる状態にする","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_PreparationListenNetWork(Port: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// 接続を受け付けている状態を解除する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_StopListenNetWork() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"    /// データを送信する","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_NetWorkSend(NetHandle: c_int, Buffer: *mut c_void, Length: c_int) -> c_int;","highlight_start":1,"highlight_end":90},{"text":"    /// 受信データ一時記憶バッファに溜まっているデータの量を得る","highlight_start":1,"highlight_end":37},{"text":"    //pub fn dx_GetNetWorkDataLength() -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// 未送信のデータの量を得る","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_GetNetWorkSendDataLength() -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// 受信データ一時記憶バッファに溜まっているデータを取得する","highlight_start":1,"highlight_end":37},{"text":"    //pub fn dx_NetWorkRecv() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// 受信したデータを読み込む、読み込んだデータはバッファから削除されない","highlight_start":1,"highlight_end":43},{"text":"    //pub fn dx_NetWorkRecvToPeek() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"    /// 新たに確立した接続を示すネットワークハンドルを得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetNewAcceptNetWork() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"    /// 新たに破棄された接続を示すネットワークハンドルを得る","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_GetLostNetWork() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// 接続状態を取得する","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_GetNetWorkAcceptState() -> c_int;","highlight_start":1,"highlight_end":50},{"text":"    /// 接続先のＩＰアドレスを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetNetWorkIP() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// ＵＤＰを使用して通信するためのソケットを作成する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_MakeUDPSocket() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ＵＤＰを使用して通信するためのソケットを削除する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_DeleteUDPSocket() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"    /// ＵＤＰを使用して他のマシンにデータを送信する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_NetWorkSendUDP() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// ＵＤＰを使用して他のマシンからのデータを受信する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_NetWorkRecvUDP() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// ＵＤＰを使用した他のマシンから受信データがあるかどうかを取得する","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_CheckNetWorkRecvUDP() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ファイル読み込み関係","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ファイルを開く","highlight_start":1,"highlight_end":16},{"text":"    //pub fn dx_FileRead_open(FilePath: *mut c_char, ASync: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    /// ファイルのサイズを得る","highlight_start":1,"highlight_end":20},{"text":"    //pub fn dx_FileRead_size() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ファイルを閉じる","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_FileRead_close(FileHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// ファイルポインタの位置を得る","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_FileRead_tell() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ファイルポインタの位置を変更する","highlight_start":1,"highlight_end":25},{"text":"    //pub fn dx_FileRead_seek() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ファイルからデータを読み込む","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_FileRead_read(Buffer: *mut c_void, ReadSize: c_int, FileHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":97},{"text":"    /// ファイルの終端かどうかを調べる","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_FileRead_eof(FileHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":56},{"text":"    /// ファイルから一行読み出す","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_FileRead_gets(Buffer:*mut c_char,Num:c_int,FileHandle:c_int) -> c_int;","highlight_start":1,"highlight_end":87},{"text":"    /// ファイルから一文字読み出す","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_FileRead_getc() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ファイルから書式付きデータを読み出す","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_FileRead_scanf() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ドット単位で画像にアクセスしたい関係","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ＣＰＵで扱うイメージの読み込み","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_LoadSoftImage(FileName:*const c_char) -> c_int;","highlight_start":1,"highlight_end":64},{"text":"    /// ＣＰＵで扱うイメージの読み込み( RGBA8 カラーに変換 )","highlight_start":1,"highlight_end":40},{"text":"    //pub fn dx_LoadARGB8ColorSoftImage(FileName:*const c_char) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    /// ＣＰＵで扱うイメージの読み込み( XGBA8 カラーに変換 )","highlight_start":1,"highlight_end":40},{"text":"    //puFileName:*const c_charb fn dx_LoadXRGB8ColorSoftImage(FileName:*const c_char) -> c_int;","highlight_start":1,"highlight_end":96},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_LoadSoftImageToMem() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み( RGBA8 カラーに変換 )","highlight_start":1,"highlight_end":46},{"text":"    //pub fn dx_LoadARGB8ColorSoftImageToMem() -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み( XGBA8 カラーに変換 )","highlight_start":1,"highlight_end":46},{"text":"    //pub fn dx_LoadXRGB8ColorSoftImageToMem() -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// ＣＰＵで扱うイメージの作成( RGBA8 カラー )","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_MakeARGB8ColorSoftImage() -> c_int;","highlight_start":1,"highlight_end":52},{"text":"    /// ＣＰＵで扱うイメージの作成( XRGB8 カラー )","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_MakeXRGB8ColorSoftImage() -> c_int;","highlight_start":1,"highlight_end":52},{"text":"    /// ＣＰＵで扱うイメージの作成( パレット２５６色 カラー )","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_MakePAL8ColorSoftImage() -> c_int;","highlight_start":1,"highlight_end":51},{"text":"    /// ＣＰＵで扱うイメージの解放","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_DeleteSoftImage() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"    /// ＣＰＵで扱うイメージを全て解放","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_InitSoftImage() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ＣＰＵで扱うイメージのサイズを取得する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GetSoftImageSize() -> c_int;","highlight_start":1,"highlight_end":45},{"text":"    /// ＣＰＵで扱うイメージを指定色で塗りつぶす(各色要素は０～２５５)","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_FillSoftImage() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ＣＰＵで扱うイメージのパレットをセットする(各色要素は０～２５５)","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_SetPaletteSoftImage() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"    /// ＣＰＵで扱うイメージのパレットを取得する(各色要素は０～２５５)","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_GetPaletteSoftImage() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"    /// ＣＰＵで扱うイメージの指定座標にドットを描画する(パレット画像用、有効値は０～２５５)","highlight_start":1,"highlight_end":52},{"text":"    //pub fn dx_DrawPixelPalCodeSoftImage() -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    /// ＣＰＵで扱うイメージの指定座標の色コードを取得する(パレット画像用、戻り値は０～２５５)","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_GetPixelPalCodeSoftImage() -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// ＣＰＵで扱うイメージの指定座標にドットを描画する(各色要素は０～２５５)","highlight_start":1,"highlight_end":45},{"text":"    //pub fn dx_DrawPixelSoftImage() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// ＣＰＵで扱うイメージの指定座標の色を取得する(各色要素は０～２５５)","highlight_start":1,"highlight_end":43},{"text":"    //pub fn dx_GetPixelSoftImage() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"    /// ＣＰＵで扱うイメージを別のイメージ上に転送する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_BltSoftImage() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// ＣＰＵで扱うイメージを画面に描画する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_DrawSoftImage() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ＣＰＵで扱うイメージからグラフィックハンドルを作成する","highlight_start":1,"highlight_end":36},{"text":"    //pub fn dx_CreateGraphFromSoftImage() -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// ＣＰＵで扱うイメージから分割グラフィックハンドルを作成する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_CreateDivGraphFromSoftImage() -> c_int;","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 非同期読み込み関係","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 非同期読み込みを行うかどうかを設定する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetUseASyncLoadFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// ハンドルが非同期読み込み中かどうかを取得する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_CheckHandleASyncLoad(Handle: c_int) -> c_int;","highlight_start":1,"highlight_end":60},{"text":"    /// 行っている非同期読み込みの数を取得する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_GetASyncLoadNum() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 文字関係関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字列の引数の文字コードを設定する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetUseCharCodeFormat(char_code_format: c_int) -> c_int;","highlight_start":1,"highlight_end":70},{"text":"    /// 文字列の先頭の文字のバイト数を取得する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GetCharBytes() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // マイナー関数","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_SetUseBackBufferTransColorFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// ウインドウがアクティブではない状態でも処理を続行するか、フラグをセットする","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_SetAlwaysRunFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    /// ログ出力を行うか否かのセット","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetOutApplicationLogValidFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":67},{"text":"    /// ＤＸアーカイブファイルの読み込み機能を使うかどうかを設定する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_SetUseDXArchiveFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// 検索するＤＸアーカイブファイルの拡張子を変更する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_SetDXArchiveExtension(Extension: *const c_char) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    /// ＤＸアーカイブファイルの鍵文字列を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_SetDXArchiveKeyString() -> c_int;","highlight_start":1,"highlight_end":50},{"text":"    /// ６４０ｘ４８０の画面で３２０ｘ２４０の画面解像度にするかどうかのフラグをセットする","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_SetEmulation320x240(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// ３Ｄ機能を使うか、のフラグをセット","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetUse3DFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":50},{"text":"    /// ScreenFlip関数実行時にＣＲＴの垂直同期信号待ちをするかのフラグセット","highlight_start":1,"highlight_end":48},{"text":"    pub fn dx_SetWaitVSyncFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    // 　描画の際のブレンドモードを詳細に設定する","highlight_start":1,"highlight_end":29},{"text":"    pub fn SetDrawCustomBlendMode(","highlight_start":1,"highlight_end":35},{"text":"        BlendEnable: c_int,","highlight_start":1,"highlight_end":28},{"text":"        SrcBlendRGB: c_int,","highlight_start":1,"highlight_end":28},{"text":"        DestBlendRGB: c_int,","highlight_start":1,"highlight_end":29},{"text":"        BlendOpRGB: c_int,","highlight_start":1,"highlight_end":27},{"text":"        SrcBlendA: c_int,","highlight_start":1,"highlight_end":26},{"text":"        DestBlendA: c_int,","highlight_start":1,"highlight_end":27},{"text":"        BlendOpA: c_int,","highlight_start":1,"highlight_end":25},{"text":"        BlendParam: c_int,","highlight_start":1,"highlight_end":27},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// 必要ならグラフィックの分割を行うか否かを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetUseDivGraphFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":56},{"text":"    /// フォーカスが他のソフトに移っているときにバックグラウンドに表示するグラフィックを設定する","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_LoadPauseGraph(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"    /// 裏画面の内容を表画面にコピーする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_ScreenCopy() -> c_int;","highlight_start":1,"highlight_end":37},{"text":"    /// 画面の色ビット数を得る","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_GetColorBitDepth() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// 現在描画対象になっている画面をＢＭＰ形式で保存する","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_SaveDrawScreen(x1: c_int, y1: c_int, x2: c_int, y2: c_int, FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":110},{"text":"    /// 使用可能なフォントの名前を列挙する","highlight_start":1,"highlight_end":26},{"text":"    //pub fn dx_EnumFontName() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// 文字列を縦に描画する","highlight_start":1,"highlight_end":19},{"text":"    //pub fn dx_DrawVString() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// フォントハンドルを使用して文字列を縦に描画する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_DrawVStringToHandle() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"    /// メモリ上の画像ファイルイメージからグラフィックハンドルを作成する","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_CreateGraphFromMem() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// メモリ上の画像ファイルイメージから既存のグラフィックハンドルにデータを転送する","highlight_start":1,"highlight_end":48},{"text":"    //pub fn dx_ReCreateGraphFromMem() -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// 画像ファイルから作成したグラフィックハンドルに再度画像ファイルから画像を読み込む","highlight_start":1,"highlight_end":49},{"text":"    //pub fn dx_ReloadFileGraphAll() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// グラフィックハンドル復元関数を登録する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_SetRestoreGraphCallback() -> c_int;","highlight_start":1,"highlight_end":52},{"text":"    /// 作成する音データの再生形式を設定する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_SetCreateSoundDataType() -> c_int;","highlight_start":1,"highlight_end":51},{"text":"    /// メモリ上の音ファイルイメージからサウンドハンドルを作成する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_LoadSoundMemByMemImage() -> c_int;","highlight_start":1,"highlight_end":51},{"text":"    /// ＭＩＤＩの演奏形態をセットする","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SelectMidiMode(mode: c_int) -> c_int;","highlight_start":1,"highlight_end":52},{"text":"    /// カーソルを点滅させるかどうかを設定する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetKeyInputCursorBrinkFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":64},{"text":"    /// ドラッグアンドドロップを有効化するかどうか設定する。","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_SetDragFileValidFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// ドラッグアンドドロップされたファイルをひとつ読み出す。","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_GetDragFilePath(FilePathBuffer: *mut u16) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"    /// ドラッグアンドドロップされたファイルの数を取得する。","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_GetDragFileNum() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    // ウィンドウの見た目を変える","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_SetWindowStyleMode(Mode: c_int) -> c_int;","highlight_start":1,"highlight_end":56},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"rustdoc does not generate documentation for extern blocks","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":1613,"byte_end":1714,"line_start":49,"line_end":50,"column_start":1,"column_end":43,"is_primary":true,"text":[{"text":"/// dxlib function extern declaration (based on Ver3.24b)","highlight_start":1,"highlight_end":58},{"text":"/// see: https://dxlib.xsrv.jp/dxfunc.html","highlight_start":1,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `//` for a plain comment","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_doc_comments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused doc comment\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:49:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m49\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// dxlib function extern declaration (based on Ver3.24b)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m50\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m/// see: https://dxlib.xsrv.jp/dxfunc.html\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m|__________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern \"stdcall\" {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // 使用必須関数\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m55\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m56\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ライブラリの初期化\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1047\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn dx_SetWindowStyleMode(Mode: c_int) -> c_int;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1048\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrustdoc does not generate documentation for extern blocks\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: use `//` for a plain comment\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_doc_comments)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `std::ffi::CStr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":50700,"byte_end":50714,"line_start":1056,"line_end":1056,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"    use std::ffi::CStr;","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":50696,"byte_end":50715,"line_start":1056,"line_end":1056,"column_start":5,"column_end":24,"is_primary":true,"text":[{"text":"    use std::ffi::CStr;","highlight_start":5,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::ffi::CStr`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1056:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1056\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::ffi::CStr;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::ffi::CString`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":50725,"byte_end":50742,"line_start":1057,"line_end":1057,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"    use std::ffi::CString;","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":50721,"byte_end":50743,"line_start":1057,"line_end":1057,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"    use std::ffi::CString;","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::ffi::CString`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1057:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1057\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::ffi::CString;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::vec::Vec`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":50810,"byte_end":50823,"line_start":1060,"line_end":1060,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    use std::vec::Vec;","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":50806,"byte_end":50824,"line_start":1060,"line_end":1060,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    use std::vec::Vec;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `std::vec::Vec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1060:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1060\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::vec::Vec;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":9636,"byte_end":9637,"line_start":217,"line_end":217,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"pub const MV1_SAVETYPE_NORMAL: i32 = (MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM);","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":9674,"byte_end":9675,"line_start":217,"line_end":217,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"pub const MV1_SAVETYPE_NORMAL: i32 = (MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM);","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_parens)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":9636,"byte_end":9637,"line_start":217,"line_end":217,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"pub const MV1_SAVETYPE_NORMAL: i32 = (MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM);","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":9674,"byte_end":9675,"line_start":217,"line_end":217,"column_start":76,"column_end":77,"is_primary":true,"text":[{"text":"pub const MV1_SAVETYPE_NORMAL: i32 = (MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM);","highlight_start":76,"highlight_end":77}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib_const_variables.rs:217:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const MV1_SAVETYPE_NORMAL: i32 = (MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_parens)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub const MV1_SAVETYPE_NORMAL: i32 = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mMV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub const MV1_SAVETYPE_NORMAL: i32 = MV1_SAVETYPE_MESH | MV1_SAVETYPE_ANIM;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":11651,"byte_end":11652,"line_start":260,"line_end":260,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_BACK: i32 = (DX_PLAYTYPE_BACKBIT);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":11671,"byte_end":11672,"line_start":260,"line_end":260,"column_start":55,"column_end":56,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_BACK: i32 = (DX_PLAYTYPE_BACKBIT);","highlight_start":55,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":11651,"byte_end":11652,"line_start":260,"line_end":260,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_BACK: i32 = (DX_PLAYTYPE_BACKBIT);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":11671,"byte_end":11672,"line_start":260,"line_end":260,"column_start":55,"column_end":56,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_BACK: i32 = (DX_PLAYTYPE_BACKBIT);","highlight_start":55,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib_const_variables.rs:260:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const DX_PLAYTYPE_BACK: i32 = (DX_PLAYTYPE_BACKBIT);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub const DX_PLAYTYPE_BACK: i32 = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mDX_PLAYTYPE_BACKBIT\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub const DX_PLAYTYPE_BACK: i32 = DX_PLAYTYPE_BACKBIT;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":11709,"byte_end":11710,"line_start":261,"line_end":261,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_LOOP: i32 = (DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":11751,"byte_end":11752,"line_start":261,"line_end":261,"column_start":77,"column_end":78,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_LOOP: i32 = (DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT);","highlight_start":77,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":11709,"byte_end":11710,"line_start":261,"line_end":261,"column_start":35,"column_end":36,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_LOOP: i32 = (DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT);","highlight_start":35,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":11751,"byte_end":11752,"line_start":261,"line_end":261,"column_start":77,"column_end":78,"is_primary":true,"text":[{"text":"pub const DX_PLAYTYPE_LOOP: i32 = (DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT);","highlight_start":77,"highlight_end":78}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib_const_variables.rs:261:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const DX_PLAYTYPE_LOOP: i32 = (DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub const DX_PLAYTYPE_LOOP: i32 = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mDX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub const DX_PLAYTYPE_LOOP: i32 = DX_PLAYTYPE_LOOPBIT | DX_PLAYTYPE_BACKBIT;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":14463,"byte_end":14464,"line_start":322,"line_end":322,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_DEFAULT: i32 = (DX_CMP_LESSEQUAL);","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":14480,"byte_end":14481,"line_start":322,"line_end":322,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_DEFAULT: i32 = (DX_CMP_LESSEQUAL);","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":14463,"byte_end":14464,"line_start":322,"line_end":322,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_DEFAULT: i32 = (DX_CMP_LESSEQUAL);","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":14480,"byte_end":14481,"line_start":322,"line_end":322,"column_start":51,"column_end":52,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_DEFAULT: i32 = (DX_CMP_LESSEQUAL);","highlight_start":51,"highlight_end":52}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib_const_variables.rs:322:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m322\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const DX_ZCMP_DEFAULT: i32 = (DX_CMP_LESSEQUAL);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m322\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub const DX_ZCMP_DEFAULT: i32 = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mDX_CMP_LESSEQUAL\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m322\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub const DX_ZCMP_DEFAULT: i32 = DX_CMP_LESSEQUAL;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":14517,"byte_end":14518,"line_start":323,"line_end":323,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_REVERSE: i32 = (DX_CMP_GREATEREQUAL);","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":14537,"byte_end":14538,"line_start":323,"line_end":323,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_REVERSE: i32 = (DX_CMP_GREATEREQUAL);","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src\\dxlib_const_variables.rs","byte_start":14517,"byte_end":14518,"line_start":323,"line_end":323,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_REVERSE: i32 = (DX_CMP_GREATEREQUAL);","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\dxlib_const_variables.rs","byte_start":14537,"byte_end":14538,"line_start":323,"line_end":323,"column_start":54,"column_end":55,"is_primary":true,"text":[{"text":"pub const DX_ZCMP_REVERSE: i32 = (DX_CMP_GREATEREQUAL);","highlight_start":54,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib_const_variables.rs:323:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub const DX_ZCMP_REVERSE: i32 = (DX_CMP_GREATEREQUAL);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0mpub const DX_ZCMP_REVERSE: i32 = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mDX_CMP_GREATEREQUAL\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0mpub const DX_ZCMP_REVERSE: i32 = DX_CMP_GREATEREQUAL;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"attribute should be applied to a free function, impl method or static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":1759,"byte_end":50520,"line_start":53,"line_end":1048,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"extern \"stdcall\" {","highlight_start":1,"highlight_end":19},{"text":"    // 使用必須関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ライブラリの初期化","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_DxLib_Init() -> c_int;","highlight_start":1,"highlight_end":37},{"text":"    /// ライブラリ使用の終了関数","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_DxLib_End() -> c_int;","highlight_start":1,"highlight_end":36},{"text":"    /// ウインドウズのメッセージを処理する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_ProcessMessage() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //算術演算関数","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_VGet(x: f32, y: f32, z: f32) -> VECTOR;","highlight_start":1,"highlight_end":54},{"text":"    pub fn dx_VAdd(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VSub(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VDot(In1: VECTOR, In2: VECTOR) -> f32;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_VCross(In1: VECTOR, In2: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_VScale(In: VECTOR, Scale: f32) -> VECTOR;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_VSize(In: VECTOR) -> f32;","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_VSquareSize(In: VECTOR) -> f32;","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_VNorm(In: VECTOR) -> VECTOR;","highlight_start":1,"highlight_end":43},{"text":"    pub fn dx_VTransform(InV: VECTOR, InM: MATRIX) -> VECTOR;","highlight_start":1,"highlight_end":62},{"text":"    pub fn dx_VTransformSR(InV: VECTOR, InM: MATRIX) -> VECTOR;","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetIdent() -> MATRIX;","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_MGetScale(Scale: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_MGetTranslate(Trans: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":54},{"text":"    pub fn dx_MGetRotX(XAxisRotate: f32) -> MATRIX;","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetRotY(YAxisRotate: f32) -> MATRIX;","highlight_start":1,"highlight_end":52},{"text":"    pub fn dx_MGetRotZ(ZAxisRotate: f32) -> MATRIX;","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetRotAxis(RotateAxis: VECTOR, Rotate: f32) -> MATRIX;","highlight_start":1,"highlight_end":70},{"text":"    pub fn dx_MGetRotVec2(In1: VECTOR, In2: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetAxis1(XAxis: VECTOR, YAxis: VECTOR, ZAxis: VECTOR, Pos: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":93},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_MGetAxis2(XAxis: VECTOR, YAxis: VECTOR, ZAxis: VECTOR, Pos: VECTOR) -> MATRIX;","highlight_start":1,"highlight_end":93},{"text":"    pub fn dx_MAdd(In1: MATRIX, In2: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":56},{"text":"    pub fn dx_MMult(In1: MATRIX, In2: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":57},{"text":"    pub fn dx_MScale(InM: MATRIX, Scale: f32) -> MATRIX;","highlight_start":1,"highlight_end":57},{"text":"    pub fn dx_MTranspose(InM: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":49},{"text":"    pub fn dx_MInverse(InM: MATRIX) -> MATRIX;","highlight_start":1,"highlight_end":47},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Live2D 関係関数","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_Live2D_SetCubism4CoreDLLPath(CoreDLLFilePath: *const c_char);","highlight_start":1,"highlight_end":76},{"text":"    pub fn dx_Live2D_RenderBegin();","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_Live2D_RenderEnd();","highlight_start":1,"highlight_end":34},{"text":"    pub fn dx_Live2D_LoadModel(FilePath: *const c_char);","highlight_start":1,"highlight_end":57},{"text":"    pub fn dx_Live2D_DeleteModel(Live2DModelHandle: c_int);","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_Live2D_Model_Update(Live2DModelHandle: c_int, DeltaTimeSeconds: f32);","highlight_start":1,"highlight_end":84},{"text":"    pub fn dx_Live2D_Model_Draw(Live2DModelHandle: c_int);","highlight_start":1,"highlight_end":59},{"text":"    pub fn dx_Live2D_Model_SetTranslate(Live2DModelHandle: c_int, x: f32, y: f32) -> c_int;","highlight_start":1,"highlight_end":92},{"text":"    pub fn dx_Live2D_Model_SetExtendRate(","highlight_start":1,"highlight_end":42},{"text":"        Live2DModelHandle: c_int,","highlight_start":1,"highlight_end":34},{"text":"        ExRateX: f32,","highlight_start":1,"highlight_end":22},{"text":"        ExRateY: f32,","highlight_start":1,"highlight_end":22},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_Live2D_Model_SetRotate(Live2DModelHandle: c_int, RotAngle: f32) -> c_int;","highlight_start":1,"highlight_end":88},{"text":"    pub fn dx_Live2D_Model_StartMotion(","highlight_start":1,"highlight_end":40},{"text":"        Live2DModelHandle: c_int,","highlight_start":1,"highlight_end":34},{"text":"        group: *const c_char,","highlight_start":1,"highlight_end":30},{"text":"        no: c_int,","highlight_start":1,"highlight_end":19},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_Live2D_Model_IsMotionFinished(Live2DModelHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":80},{"text":"    pub fn dx_Live2D_Model_SetExpression(","highlight_start":1,"highlight_end":42},{"text":"        Live2DModelHandle: c_int,","highlight_start":1,"highlight_end":34},{"text":"        expressionID: *const c_char,","highlight_start":1,"highlight_end":37},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    // ３Ｄ関係関数","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_MV1DuplicateModel(SrcMHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":61},{"text":"    pub fn dx_MV1AttachAnim(","highlight_start":1,"highlight_end":29},{"text":"        MHandle: c_int,","highlight_start":1,"highlight_end":24},{"text":"        AnimIndex: c_int,","highlight_start":1,"highlight_end":26},{"text":"        AnimSrcMHandle: c_int,","highlight_start":1,"highlight_end":31},{"text":"        NameCheck: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_MV1SetLoadModelPhysicsWorldGravity(Gravity: f32) -> c_int;","highlight_start":1,"highlight_end":73},{"text":"    pub fn dx_MV1SetLoadModelUsePhysicsMode(PhysicsMode: c_int) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    pub fn dx_MV1GetAnimNum(MHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    pub fn dx_MV1DetachAnim(MHandle: c_int, AttachIndex: c_int) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    pub fn dx_MV1SetAttachAnimTime(MHandle: c_int, AttachIndex: c_int, Time: f32) -> c_int;","highlight_start":1,"highlight_end":92},{"text":"    pub fn dx_MV1GetAttachAnimTotalTime(MHandle: c_int, AttachIndex: c_int) -> f32;","highlight_start":1,"highlight_end":84},{"text":"    pub fn dx_MV1GetAttachAnimTime(MHandle: c_int, AttachIndex: c_int) -> f32;","highlight_start":1,"highlight_end":79},{"text":"    pub fn dx_MV1SetAttachAnimBlendRate(MHandle: c_int, AttachIndex: c_int, Rate: f32) -> c_int;","highlight_start":1,"highlight_end":97},{"text":"    pub fn dx_SetCameraPositionAndTarget_UpVecY(Position: VECTOR, Target: VECTOR) -> c_int;","highlight_start":1,"highlight_end":92},{"text":"    pub fn dx_SetCameraNearFar(Near: f32, Far: f32) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    // Zバッファを使うかどうかのフラグ","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SetUseZBuffer3D(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    // Zバッファへの書き込みするかどうかのフラグ","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_SetWriteZBuffer3D(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // モデルの読み込み","highlight_start":1,"highlight_end":16},{"text":"    //pub fn dx_MV1LoadModel(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":64},{"text":"    // モデルの描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_MV1DrawModel(MHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    pub fn dx_MV1DeleteModel(MHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":55},{"text":"    //　モデルの位置の指定","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_MV1SetPosition(MHandle: c_int, Position: VECTOR) -> c_int;","highlight_start":1,"highlight_end":73},{"text":"    pub fn dx_MV1SetScale(MHandle: c_int, Scale: VECTOR) -> c_int;","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawLine3D(Pos1: VECTOR, Pos2: VECTOR, Color: Color) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    pub fn dx_DrawTriangle3D(","highlight_start":1,"highlight_end":30},{"text":"        Pos1: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos2: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos3: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawSphere3D(","highlight_start":1,"highlight_end":28},{"text":"        CenterPos: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        r: f32,","highlight_start":1,"highlight_end":16},{"text":"        DivNum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawCapsule3D(","highlight_start":1,"highlight_end":29},{"text":"        Pos1: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        Pos2: VECTOR,","highlight_start":1,"highlight_end":22},{"text":"        r: f32,","highlight_start":1,"highlight_end":16},{"text":"        DivNum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawCone3D(","highlight_start":1,"highlight_end":26},{"text":"        TopPos: VECTOR,","highlight_start":1,"highlight_end":24},{"text":"        BottomPos: VECTOR,","highlight_start":1,"highlight_end":27},{"text":"        r: f32,","highlight_start":1,"highlight_end":16},{"text":"        DivNum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        DifColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        SpcColor: u32,","highlight_start":1,"highlight_end":23},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn dx_DrawBillboard3D(","highlight_start":1,"highlight_end":31},{"text":"        Pos: VECTOR,","highlight_start":1,"highlight_end":21},{"text":"        cx: f32,","highlight_start":1,"highlight_end":17},{"text":"        cy: f32,","highlight_start":1,"highlight_end":17},{"text":"        Size: f32,","highlight_start":1,"highlight_end":19},{"text":"        Angle: f32,","highlight_start":1,"highlight_end":20},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_DrawPolygon3D(","highlight_start":1,"highlight_end":29},{"text":"        Vertex: *mut VERTEX3D,","highlight_start":1,"highlight_end":31},{"text":"        PolygonNum: c_int,","highlight_start":1,"highlight_end":27},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 図形描画関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 線を描画","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_DrawLine(x1: c_int, y1: c_int, x2: c_int, y2: c_int, color: Color) -> c_int;","highlight_start":1,"highlight_end":91},{"text":"    /// 線を描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawLineAA(x1: f32, y1: f32, x2: f32, y2: f32, color: Color) -> c_int;","highlight_start":1,"highlight_end":85},{"text":"    /// 四角を描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_DrawBox(","highlight_start":1,"highlight_end":23},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 四角を描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_DrawBoxAA(","highlight_start":1,"highlight_end":25},{"text":"        x1: f32,","highlight_start":1,"highlight_end":17},{"text":"        y1: f32,","highlight_start":1,"highlight_end":17},{"text":"        x2: f32,","highlight_start":1,"highlight_end":17},{"text":"        y2: f32,","highlight_start":1,"highlight_end":17},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 円の描画","highlight_start":1,"highlight_end":13},{"text":"    pub fn dx_DrawCircle(x: c_int, y: c_int, r: c_int, color: Color, fill_flag: c_int) -> c_int;","highlight_start":1,"highlight_end":97},{"text":"    /// 円の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawCircleAA(","highlight_start":1,"highlight_end":28},{"text":"        x: f32,","highlight_start":1,"highlight_end":16},{"text":"        y: f32,","highlight_start":1,"highlight_end":16},{"text":"        r: f32,","highlight_start":1,"highlight_end":16},{"text":"        pos_num: c_int,","highlight_start":1,"highlight_end":24},{"text":"        color: Color,","highlight_start":1,"highlight_end":22},{"text":"        fill_flag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 楕円の描画","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_DrawOval(","highlight_start":1,"highlight_end":24},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        rx: c_int,","highlight_start":1,"highlight_end":19},{"text":"        ry: c_int,","highlight_start":1,"highlight_end":19},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 楕円の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_DrawOvalAA(","highlight_start":1,"highlight_end":26},{"text":"        x: f32,","highlight_start":1,"highlight_end":16},{"text":"        y: f32,","highlight_start":1,"highlight_end":16},{"text":"        rx: f32,","highlight_start":1,"highlight_end":17},{"text":"        ry: f32,","highlight_start":1,"highlight_end":17},{"text":"        posnum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 三角形の描画","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawTriangle(","highlight_start":1,"highlight_end":28},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x3: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y3: c_int,","highlight_start":1,"highlight_end":19},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 三角形の描画(アンチエイリアス効果付き)","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawTriangleAA(","highlight_start":1,"highlight_end":30},{"text":"        x1: f32,","highlight_start":1,"highlight_end":17},{"text":"        y1: f32,","highlight_start":1,"highlight_end":17},{"text":"        x2: f32,","highlight_start":1,"highlight_end":17},{"text":"        y2: f32,","highlight_start":1,"highlight_end":17},{"text":"        x3: f32,","highlight_start":1,"highlight_end":17},{"text":"        y3: f32,","highlight_start":1,"highlight_end":17},{"text":"        Color: Color,","highlight_start":1,"highlight_end":22},{"text":"        FillFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 点を描画する","highlight_start":1,"highlight_end":15},{"text":"    pub fn dx_DrawPixel(x: c_int, y: c_int, Color: Color) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// 指定点の色を取得","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_GetPixel(x: c_int, y: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // グラフィックデータ制御関数","highlight_start":1,"highlight_end":21},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 画像ファイルを読みこんで画面に表示する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_LoadGraphScreen() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"    /// 画像ファイルのメモリへの読みこみ、及び動画ファイルのロード","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_LoadGraph() -> c_int;","highlight_start":1,"highlight_end":38},{"text":"    /// 画像ファイルのメモリへの分割読みこみ","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_LoadDivGraph(FileName:*const c_char,AllNum:c_int,XNum:c_int,YNum:c_int,XSize:c_int,YSize:c_int,HandleBuf:*mut c_int) -> c_int;","highlight_start":1,"highlight_end":143},{"text":"    /// 空のグラフィックを作成する","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_MakeGraph(SizeX: c_int, SizeY: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// 描画対象にできるグラフィックを作成する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_MakeScreen(SizeX: c_int, SizeY: c_int, UseAlphaChannel: c_int) -> c_int;","highlight_start":1,"highlight_end":87},{"text":"    /// 描画対象にできるグラフィックのマルチサンプリング設定を行う","highlight_start":1,"highlight_end":38},{"text":"    pub fn dx_SetCreateDrawValidGraphMultiSample(Samples: c_int, Quality: c_int) -> c_int;","highlight_start":1,"highlight_end":91},{"text":"    /// 作成するグラフィックのビット深度を設定する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_SetCreateGraphColorBitDepth(BitDepth: c_int) -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// 描画可能な浮動小数点型のグラフィックを作成するかどうかの設定を行う","highlight_start":1,"highlight_end":42},{"text":"    pub fn dx_SetDrawValidFloatTypeGraphCreateFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    /// 作成する描画可能なグラフィックのチャンネル数の設定を行う","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_SetCreateDrawValidGraphChannelNum(ChannelNum: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    /// 読み込み時に画像を乗算済みα画像に変換するかを設定する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetUsePremulAlphaConvertLoad(UseFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// メモリに読みこんだグラフィックの描画","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawGraph(x: c_int, y: c_int, GrHandle: c_int, TransFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":89},{"text":"    // メモリに読み込んだグラフィックの描画　(float版)","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_DrawGraphF(x: f32, y: f32, GrHandle: c_int, TransFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":86},{"text":"    /// メモリに読みこんだグラフィックのＬＲ反転描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawTurnGraph(","highlight_start":1,"highlight_end":29},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読みこんだグラフィックの拡大縮小描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawExtendGraph(","highlight_start":1,"highlight_end":31},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読みこんだグラフィックの回転描画","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawRotaGraph(","highlight_start":1,"highlight_end":29},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        ex_rate: f64,","highlight_start":1,"highlight_end":22},{"text":"        angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        gr_handle: c_int,","highlight_start":1,"highlight_end":26},{"text":"        trans_flag: c_int,","highlight_start":1,"highlight_end":27},{"text":"        turn_flag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読みこんだグラフィックの回転描画(回転中心指定あり)","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_DrawRotaGraph2(","highlight_start":1,"highlight_end":30},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        cx: c_int,","highlight_start":1,"highlight_end":19},{"text":"        cy: c_int,","highlight_start":1,"highlight_end":19},{"text":"        ExtRate: f64,","highlight_start":1,"highlight_end":22},{"text":"        Angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"        TurnFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読みこんだグラフィックの回転描画(回転中心指定あり、縦横拡大率別指定)","highlight_start":1,"highlight_end":48},{"text":"    pub fn dx_DrawRotaGraph3(","highlight_start":1,"highlight_end":30},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        cx: c_int,","highlight_start":1,"highlight_end":19},{"text":"        cy: c_int,","highlight_start":1,"highlight_end":19},{"text":"        ExtRateX: f64,","highlight_start":1,"highlight_end":23},{"text":"        ExtRateY: f64,","highlight_start":1,"highlight_end":23},{"text":"        Angle: f64,","highlight_start":1,"highlight_end":20},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"        TurnFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読みこんだグラフィックの自由変形描画","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_DrawModiGraph(","highlight_start":1,"highlight_end":29},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x3: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y3: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x4: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y4: c_int,","highlight_start":1,"highlight_end":19},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// グラフィックの指定矩形部分のみを描画","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DrawRectGraph(","highlight_start":1,"highlight_end":29},{"text":"        DestX: c_int,","highlight_start":1,"highlight_end":22},{"text":"        DestY: c_int,","highlight_start":1,"highlight_end":22},{"text":"        SrcX: c_int,","highlight_start":1,"highlight_end":21},{"text":"        SrcY: c_int,","highlight_start":1,"highlight_end":21},{"text":"        Width: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Height: c_int,","highlight_start":1,"highlight_end":23},{"text":"        GraphHandle: c_int,","highlight_start":1,"highlight_end":28},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"        TurnFlag: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 指定のグラフィックの指定部分だけを抜き出して新たなグラフィックを作成する","highlight_start":1,"highlight_end":45},{"text":"    pub fn dx_DerivationGraph(","highlight_start":1,"highlight_end":31},{"text":"        SrcX: c_int,","highlight_start":1,"highlight_end":21},{"text":"        SrcY: c_int,","highlight_start":1,"highlight_end":21},{"text":"        Width: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Height: c_int,","highlight_start":1,"highlight_end":23},{"text":"        SrcGraphHandle: c_int,","highlight_start":1,"highlight_end":31},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 描画先に設定されているグラフィック領域から指定領域のグラフィックを読みこむ","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_GetDrawScreenGraph(","highlight_start":1,"highlight_end":34},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// グラフィックのサイズを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetGraphSize() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// 読みこんだグラフィックデータをすべて削除する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_InitGraph() -> c_int;","highlight_start":1,"highlight_end":36},{"text":"    /// 指定のグラフィックをメモリ上から削除する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DeleteGraph(GrHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// 描画モードをセットする","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SetDrawMode(DrawMode: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// 描画の際のブレンドモードをセットする","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_SetDrawBlendMode(blend_mode: c_int, pal: c_int) -> c_int;","highlight_start":1,"highlight_end":72},{"text":"    /// 描画輝度をセット","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_SetDrawBright(RedBright: c_int, GreenBright: c_int, BlueBright: c_int) -> c_int;","highlight_start":1,"highlight_end":95},{"text":"    /// グラフィックに設定する透過色をセットする","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_SetTransColor(Red: c_int, Green: c_int, Blue: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    // 画像ファイルからブレンド画像を読み込む","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_LoadBlendGraph() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// ブレンド画像と通常画像を合成して描画する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawBlendGraph(","highlight_start":1,"highlight_end":30},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        GrHandle: c_int,","highlight_start":1,"highlight_end":25},{"text":"        TransFlag: c_int,","highlight_start":1,"highlight_end":26},{"text":"        BlendGraph: c_int,","highlight_start":1,"highlight_end":27},{"text":"        BorderParam: c_int,","highlight_start":1,"highlight_end":28},{"text":"        BorderRange: c_int,","highlight_start":1,"highlight_end":28},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 画像にフィルター処理を施す","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GraphFilter() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// 画像にフィルター処理を施す( 出力先画像指定版 )","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GraphFilterBlt() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// 画像にフィルター処理を施す( 出力先画像、使用矩形指定版 )","highlight_start":1,"highlight_end":39},{"text":"    //pub fn dx_GraphFilterRectBlt() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// 二つの画像を特殊効果付きでブレンドする","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GraphBlend() -> c_int;","highlight_start":1,"highlight_end":39},{"text":"    /// 二つの画像を特殊効果付きでブレンドする( 出力先画像指定版 )","highlight_start":1,"highlight_end":40},{"text":"    //pub fn dx_GraphBlendBlt() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// 二つの画像を特殊効果付きでブレンドする( 出力先画像、使用矩形指定版 )","highlight_start":1,"highlight_end":45},{"text":"    //pub fn dx_GraphBlendRectBlt() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 文字描画関係関数","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字列を描画する","highlight_start":1,"highlight_end":17},{"text":"    //  pub fn dx_DrawString(x: c_int, y: c_int, string: *const c_char, color: Color) -> c_int;","highlight_start":1,"highlight_end":96},{"text":"    /// 書式付き文字列を描画する","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_DrawFormatString(x:c_int,y:c_int,color:Color,format:*const c_char, ...) -> c_int;","highlight_start":1,"highlight_end":98},{"text":"    /// DrawString で描画される文字列の幅(ドット単位)を得る","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_GetDrawStringWidth() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// DrawFormatString 関数書式付き文字列の描画幅(ドット単位)を得る","highlight_start":1,"highlight_end":49},{"text":"    //pub fn dx_GetDrawFormatStringWidth() -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// 描画する文字列のサイズをセットする","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetFontSize(size: c_int) -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// 描画する文字列の文字の太さをセットする","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetFontThickness(TinckPal: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// 描画するフォントを変更する","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_ChangeFont(name: *const c_char) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// 文字列描画に使用するフォントのタイプを変更する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_ChangeFontType(FontType: c_int) -> c_int;","highlight_start":1,"highlight_end":56},{"text":"    /// 新しいフォントデータを作成","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_CreateFontToHandle(FontName: *const c_char,Size: c_int,Thick: c_int,FontType: c_int) -> c_int;","highlight_start":1,"highlight_end":111},{"text":"    /// ＤＸフォントデータファイルを読み込む","highlight_start":1,"highlight_end":27},{"text":"    // pub fn dx_LoadFontDataToHandle(FileName: *const c_char, EdgeSize: c_int) -> c_int;","highlight_start":1,"highlight_end":90},{"text":"    /// フォントデータを削除する","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_DeleteFontToHandle(FontHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// 作成するフォントデータを『乗算済みα』用にするかどうかを設定する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_SetFontCacheUsePremulAlphaFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// 指定のフォントデータで文字列を描画する","highlight_start":1,"highlight_end":28},{"text":"    // pub fn dx_DrawStringToHandle(x: c_int,y: c_int,String: *const c_char,Color: Color,FontHandle: c_int,) -> c_int;","highlight_start":1,"highlight_end":119},{"text":"    /// 指定のフォントデータで書式付き文字列を描画する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_DrawFormatStringToHandle() -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// 指定のフォントデータで描画する文字列の幅を得る","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_GetDrawStringWidthToHandle(String:*const c_char,StrLen:c_int, FontHandle:c_int) -> c_int;","highlight_start":1,"highlight_end":106},{"text":"    /// 指定のフォントデータで書式付き文字列の描画幅を得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetDrawFormatStringWidthToHandle() -> c_int;","highlight_start":1,"highlight_end":61},{"text":"    /// 指定のフォントデータの情報を得る","highlight_start":1,"highlight_end":25},{"text":"    //pub fn dx_GetFontStateToHandle(FontName:*const c_char,Size:*mut c_int,Thick:*mut c_int,FontHandle:c_int) -> c_int;","highlight_start":1,"highlight_end":121},{"text":"    /// フォントデータを全て初期化する","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_InitFontToHandle() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 簡易画面出力関数","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //pub fn dx_() -> c_int;","highlight_start":1,"highlight_end":29},{"text":"    // 簡易文字列描画","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //pub unsafe fn  dx_printfDx(arg: T, arg2: U, mut args: ...) -> c_int;","highlight_start":1,"highlight_end":75},{"text":"    /// 簡易画面出力履歴をクリアする","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_clsDx() -> c_int;","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // その他画面操作系関数","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 画面モードの変更","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_SetGraphMode(","highlight_start":1,"highlight_end":28},{"text":"        SizeX: c_int,","highlight_start":1,"highlight_end":22},{"text":"        SizeY: c_int,","highlight_start":1,"highlight_end":22},{"text":"        ColorBitNum: c_int,","highlight_start":1,"highlight_end":28},{"text":"        RefreshRate: c_int,","highlight_start":1,"highlight_end":28},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// フルスクリーンモード時の解像度モードを設定する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_SetFullScreenResolutionMode(ResolutionMode: c_int) -> c_int;","highlight_start":1,"highlight_end":75},{"text":"    /// フルスクリーンモード時の画面拡大モードを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetFullScreenScalingMode(ScalingMode: c_int) -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// 現在の画面の大きさとカラービット数を得る","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_GetScreenState(SizeX:*mut c_int,SizeY:*mut c_int,ColorBitDepth:*mut c_int) -> c_int;","highlight_start":1,"highlight_end":101},{"text":"    /// 描画可能領域のセット","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_SetDrawArea(x1: c_int, y1: c_int, x2: c_int, y2: c_int) -> c_int;","highlight_start":1,"highlight_end":80},{"text":"    /// 画面に描かれたものを消去する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_ClearDrawScreen() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"    /// 画面の背景色を設定する","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SetBackgroundColor(Red: c_int, Green: c_int, Blue: c_int) -> c_int;","highlight_start":1,"highlight_end":82},{"text":"    /// 色コードを取得する","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_GetColor(Red: c_int, Green: c_int, Blue: c_int) -> Color;","highlight_start":1,"highlight_end":72},{"text":"    pub fn dx_GetColorU8(Red: c_int, Green: c_int, Blue: c_int, Alpha: c_int) -> COLOR_U8;","highlight_start":1,"highlight_end":91},{"text":"    /// 描画先グラフィック領域の指定","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetDrawScreen(DrawScreen: c_int) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// フリップ関数、画面の裏ページ(普段は表示されていない)の内容を表ページ(普段表示されている)に反映する","highlight_start":1,"highlight_end":60},{"text":"    pub fn dx_ScreenFlip() -> c_int;","highlight_start":1,"highlight_end":37},{"text":"    /// 画面のフルスクリーンアンチエイリアスモードの設定をする","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetFullSceneAntiAliasingMode(Samples: c_int, Quality: c_int) -> c_int;","highlight_start":1,"highlight_end":85},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 動画関係関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 動画ファイルの再生","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_PlayMovie(FileName:*const c_char,ExRate:c_int,PlayType:c_int) -> c_int;","highlight_start":1,"highlight_end":88},{"text":"    /// ムービーグラフィックの動画の再生を開始する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_PlayMovieToGraph(GraphHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":61},{"text":"    /// ムービーグラフィックの動画再生を一時停止する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_PauseMovieToGraph(GraphHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// ムービーグラフィックの動画の再生位置を変更する","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_SeekMovieToGraph(GraphHandle: c_int, Time: c_int) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    /// ムービーグラフィックの動画の再生位置を得る","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_TellMovieToGraph(GraphHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":61},{"text":"    /// ムービーグラフィックの動画の再生状態を得る","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_GetMovieStateToGraph(GraphHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":65},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // マスク関係関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// マスク画面を作成する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_CreateMaskScreen() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// マスク画面を削除する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_DeleteMaskScreen() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// マスクデータを画像ファイル(BMP.JPEG.PNG)から構築する","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_LoadMask(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":60},{"text":"    /// マスクデータを画像ファイル(BMP.JPEG.PNG)から分割構築する","highlight_start":1,"highlight_end":44},{"text":"    //pub fn dx_LoadDivMask() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// マスクデータをマスク画面に描画する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_DrawMask(x: c_int, y: c_int, MaskHandle: c_int, TransMode: c_int) -> c_int;","highlight_start":1,"highlight_end":90},{"text":"    /// 指定のマスク画面領域を指定のマスクデータをタイル上に並べて埋める","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_DrawFillMask(x1: c_int, y1: c_int, x2: c_int, y2: c_int, MaskHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":100},{"text":"    /// マスクデータを削除","highlight_start":1,"highlight_end":18},{"text":"    pub fn dx_DeleteMask(MaskHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    /// マスクデータを初期化する","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_InitMask() -> c_int;","highlight_start":1,"highlight_end":35},{"text":"    /// マスク画面を指定の色で塗りつぶす","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_FillMaskScreen(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":52},{"text":"    /// マスク画面の有効の有無を変更","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetUseMaskScreenFlag(ValidFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":63},{"text":"    /// 空のマスクデータの作成","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_MakeMask(Width: c_int, Height: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// マスクデータの大きさを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetMaskSize(WidthBuf:*mut c_int,HeightBuf:*mut c_int,MaskHandle:c_int) -> c_int;","highlight_start":1,"highlight_end":97},{"text":"    /// マスクのデータをマスクデータ領域に転送する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_SetDataToMask(","highlight_start":1,"highlight_end":29},{"text":"        Width: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Height: c_int,","highlight_start":1,"highlight_end":23},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"        MaskHandle: c_int,","highlight_start":1,"highlight_end":27},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// マスクのデータをマスク画面に直接描画する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_DrawMaskToDirectData(","highlight_start":1,"highlight_end":36},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        Width: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Height: c_int,","highlight_start":1,"highlight_end":23},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"        TransMode: c_int,","highlight_start":1,"highlight_end":26},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// マスクのデータをタイル上に並べた形で直接マスク画面全体に描画する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_DrawFillMaskToDirectData(","highlight_start":1,"highlight_end":40},{"text":"        x1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y1: c_int,","highlight_start":1,"highlight_end":19},{"text":"        x2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        y2: c_int,","highlight_start":1,"highlight_end":19},{"text":"        Width: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Height: c_int,","highlight_start":1,"highlight_end":23},{"text":"        MaskData: *mut c_void,","highlight_start":1,"highlight_end":31},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 入力関係の関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ジョイパッドが接続されている数を取得する","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_GetJoypadNum() -> c_int;","highlight_start":1,"highlight_end":39},{"text":"    /// ジョイパッドの入力状態を得る","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_GetJoypadInputState(InputType: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// ジョイパッドのアナログ的なレバー入力情報を得る","highlight_start":1,"highlight_end":32},{"text":"    pub fn dx_GetJoypadAnalogInput(XBuf: *mut c_int, YBuf: *mut c_int, InputType: c_int) -> c_int;","highlight_start":1,"highlight_end":99},{"text":"    /// ジョイパッドのDirectInputから取得できる情報を得る","highlight_start":1,"highlight_end":39},{"text":"    //pub fn dx_GetJoypadDirectInputState() -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    /// ジョイパッドのXInputから取得できる情報を得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetJoypadXInputState() -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// ジョイパッドの方向入力の無効範囲を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_SetJoypadDeadZone() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"    /// ジョイパッドの振動を開始する","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_StartJoypadVibration(","highlight_start":1,"highlight_end":36},{"text":"        InputType: c_int,","highlight_start":1,"highlight_end":26},{"text":"        Power: c_int,","highlight_start":1,"highlight_end":22},{"text":"        Time: c_int,","highlight_start":1,"highlight_end":21},{"text":"        EffectIndex: c_int,","highlight_start":1,"highlight_end":28},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// ジョイパッドの振動を停止する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_StopJoypadVibration() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// マウスカーソルの表示設定フラグのセット","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetMouseDispFlag(DispFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// マウスカーソルの位置を取得する","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_GetMousePoint(XBuf: *mut c_int, YBuf: *mut c_int) -> c_int;","highlight_start":1,"highlight_end":76},{"text":"    /// マウスカーソルの位置をセットする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_SetMousePoint(PointX: c_int, PointY: c_int) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// マウスのボタンの状態を得る","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_GetMouseInput() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// マウスのボタンが押されたり離されたりした履歴を取得する","highlight_start":1,"highlight_end":36},{"text":"    //pub fn dx_GetMouseInputLog2(Button:*mut c_int,ClickX:*mut c_int,ClickY:*mut c_int,LogType:*mut c_int, LogDelete:c_int ) -> c_int;","highlight_start":1,"highlight_end":136},{"text":"    /// マウスホイールの回転量を得る","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_GetMouseWheelRotVol() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// タッチされている箇所の数を取得する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_GetTouchInputNum() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// タッチされている箇所の情報を取得する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_GetTouchInput(InputNo:c_int,PositionX:*mut c_int,PositionY:*mut c_int,ID:*mut c_int,Device:*mut c_int) -> c_int;","highlight_start":1,"highlight_end":129},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// すべてのキーの押下状態を取得","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_CheckHitKeyAll(check_type: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// 特定キーの入力状態を得る","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_CheckHitKey(key_code: c_int) -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// キーボードのすべてのキーの押下状態を取得する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_GetHitKeyStateAll(key_state_buf: *mut c_char) -> c_int;","highlight_start":1,"highlight_end":70},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字入力バッファに溜まった文字データから１文字取得する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_GetInputChar(DeleteFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":56},{"text":"    /// 文字入力バッファに溜まった文字データから１文字取得する、バッファになにも文字コードがない場合はキーが押されるまで待つ","highlight_start":1,"highlight_end":67},{"text":"    pub fn dx_GetInputCharWait(DeleteFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":60},{"text":"    /// 文字入力バッファをクリアする","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_ClearInputCharBuf() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// キーボードによる文字列の入力","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_KeyInputString(","highlight_start":1,"highlight_end":30},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        CharMaxLength: c_int,","highlight_start":1,"highlight_end":30},{"text":"        StrBuffer: *mut c_char,","highlight_start":1,"highlight_end":32},{"text":"        CancelValidFlag: c_int,","highlight_start":1,"highlight_end":32},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// キーボードによる半角文字列のみの入力","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_KeyInputSingleCharString(","highlight_start":1,"highlight_end":40},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        CharMaxLength: c_int,","highlight_start":1,"highlight_end":30},{"text":"        StrBuffer: *mut c_char,","highlight_start":1,"highlight_end":32},{"text":"        CancelValidFlag: c_int,","highlight_start":1,"highlight_end":32},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// キーボードによる数値の入力","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_KeyInputNumber(","highlight_start":1,"highlight_end":30},{"text":"        x: c_int,","highlight_start":1,"highlight_end":18},{"text":"        y: c_int,","highlight_start":1,"highlight_end":18},{"text":"        MaxNum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        MinNum: c_int,","highlight_start":1,"highlight_end":23},{"text":"        CancelValidFlag: c_int,","highlight_start":1,"highlight_end":32},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// KeysnputString系 関数使用時の文字の各色を変更する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_SetKeyInputStringColor(","highlight_start":1,"highlight_end":38},{"text":"        NmlStr: u32,","highlight_start":1,"highlight_end":21},{"text":"        NmlCur: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMEStrBack: u32,","highlight_start":1,"highlight_end":25},{"text":"        IMECur: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMELine: u32,","highlight_start":1,"highlight_end":22},{"text":"        IMESelectStr: u32,","highlight_start":1,"highlight_end":27},{"text":"        IMEModeStr: u32,","highlight_start":1,"highlight_end":25},{"text":"        NmlStrE: u32,","highlight_start":1,"highlight_end":22},{"text":"        IMESelectStrE: u32,","highlight_start":1,"highlight_end":28},{"text":"        IMEModeStrE: u32,","highlight_start":1,"highlight_end":26},{"text":"        IMESelectWinE: u32,","highlight_start":1,"highlight_end":28},{"text":"        IMESelectWinF: u32,","highlight_start":1,"highlight_end":28},{"text":"        SelectStrBackColor: u32,","highlight_start":1,"highlight_end":33},{"text":"        SelectStrColor: u32,","highlight_start":1,"highlight_end":29},{"text":"        SelectStrEdgeColor: u32,","highlight_start":1,"highlight_end":33},{"text":"        IMEStr: u32,","highlight_start":1,"highlight_end":21},{"text":"        IMEStrE: u32,","highlight_start":1,"highlight_end":22},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// 新しいキー入力データの作成","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_MakeKeyInput(","highlight_start":1,"highlight_end":28},{"text":"        MaxStrLength: c_int,","highlight_start":1,"highlight_end":29},{"text":"        CancelValidFlag: c_int,","highlight_start":1,"highlight_end":32},{"text":"        SingleCharOnlyFlag: c_int,","highlight_start":1,"highlight_end":35},{"text":"        NumCharOnlyFlag: c_int,","highlight_start":1,"highlight_end":32},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// キー入力データの削除","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_DeleteKeyInput(InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":59},{"text":"    /// すべてのキー入力データの削除","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_InitKeyInput() -> c_int;","highlight_start":1,"highlight_end":39},{"text":"    /// 指定のキー入力をアクティブにする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_SetActiveKeyInput(InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// 入力が終了しているか取得する","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_CheckKeyInput(InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// キー入力中データの描画","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_DrawKeyInputString(x: c_int, y: c_int, InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":83},{"text":"    /// 入力モード文字列を描画する","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_DrawKeyInputModeString(x: c_int, y: c_int) -> c_int;","highlight_start":1,"highlight_end":67},{"text":"    /// キー入力データに指定の文字列をセットする","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_SetKeyInputString() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"    /// キー入力データに指定の数値を文字に置き換えてセットする","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_SetKeyInputNumber(Number: c_int, InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    /// 入力データの文字列を取得する","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_GetKeyInputString() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"    /// 入力データの文字列を数値として取得する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_GetKeyInputNumber(InputHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 音利用関数","highlight_start":1,"highlight_end":13},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 音ファイルを再生する","highlight_start":1,"highlight_end":19},{"text":"    //pub fn dx_PlaySoundFile(FileName:&str,PlayType:c_int) -> c_int;","highlight_start":1,"highlight_end":70},{"text":"    /// 音ファイルが再生中か調べる","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_CheckSoundFile() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// 音ファイルの再生を止める","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_StopSoundFile() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// 音ファイルをメモリに読みこむ","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_LoadSoundMem() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// メモリに読みこんだ音データを再生する","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_PlaySoundMem(SoundHandle: c_int, PlayType: c_int, TopPositionFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":98},{"text":"    /// メモリに読みこんだ音データが再生中か調べる","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_CheckSoundMem(SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// メモリに読み込んだ音データの再生を止める","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_StopSoundMem(SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// メモリに読みこんだ音データを削除する","highlight_start":1,"highlight_end":27},{"text":"    pub fn dx_DeleteSoundMem(SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":59},{"text":"    /// メモリに読みこんだ音データをすべて消去する","highlight_start":1,"highlight_end":30},{"text":"    pub fn dx_InitSoundMem() -> c_int;","highlight_start":1,"highlight_end":39},{"text":"    /// メモリに読みこんだ音データの再生にパンを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_ChangePanSoundMem(PanPal: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    /// メモリに読みこんだ音データの再生にボリュームを設定する","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_ChangeVolumeSoundMem(VolumePal: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":83},{"text":"    /// メモリに読みこんだ音データの次の再生にのみ使用するパンを設定する","highlight_start":1,"highlight_end":41},{"text":"    pub fn dx_ChangeNextPlayPanSoundMem(PanPal: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":85},{"text":"    /// メモリに読みこんだ音データの次の再生にのみ使用するボリュームを設定する","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_ChangeNextPlayVolumeSoundMem(VolumePal: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":91},{"text":"    /// メモリに読み込んだ音データの再生周波数を設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetFrequencySoundMem(FrequencyPal: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":86},{"text":"    /// メモリに読み込んだ音データのループ位置を設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetLoopPosSoundMem(LoopTime: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":80},{"text":"    /// メモリに読み込んだ音データのループ位置を設定する(サンプル位置指定)","highlight_start":1,"highlight_end":43},{"text":"    pub fn dx_SetLoopSamplePosSoundMem(LoopSamplePosition: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":96},{"text":"    /// メモリに読み込んだ音データの再生位置をサンプル単位で変更する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_SetCurrentPositionSoundMem(SamplePosition: c_int, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":94},{"text":"    /// 既にメモリに読み込んである音データを使用するサウンドハンドルを新たに作成する( 非ストリームサウンドのみ )","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_DuplicateSoundMem(SrcSoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":65},{"text":"    /// 作成するメモリに読み込んだ音データのピッチ( 音の長さを変えずに音程を変更する )レートを設定する","highlight_start":1,"highlight_end":58},{"text":"    pub fn dx_SetCreateSoundPitchRate(Cents: f32) -> c_int;","highlight_start":1,"highlight_end":60},{"text":"    /// 作成するメモリに読み込んだ音データのタイムストレッチ( 音程を変えずに音の長さを変更する )レートを設定する","highlight_start":1,"highlight_end":63},{"text":"    pub fn dx_SetCreateSoundTimeStretchRate(Rate: f32) -> c_int;","highlight_start":1,"highlight_end":65},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の再生位置を設定する","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_Set3DPositionSoundMem(Position: VECTOR, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":84},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の音が聞こえる距離を設定する","highlight_start":1,"highlight_end":44},{"text":"    pub fn dx_Set3DRadiusSoundMem(Radius: f32, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用の移動速度を設定する","highlight_start":1,"highlight_end":40},{"text":"    pub fn dx_Set3DVelocitySoundMem(Velocity: VECTOR, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":84},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の再生位置を設定する","highlight_start":1,"highlight_end":51},{"text":"    pub fn dx_SetNextPlay3DPositionSoundMem(Position: VECTOR, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":92},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の音が聞こえる距離を設定する","highlight_start":1,"highlight_end":55},{"text":"    pub fn dx_SetNextPlay3DRadiusSoundMem(Radius: f32, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":85},{"text":"    /// メモリに読み込んだ音データの次の再生のみに使用する３Ｄサウンド用の移動速度を設定する","highlight_start":1,"highlight_end":51},{"text":"    pub fn dx_SetNextPlay3DVelocitySoundMem(Velocity: VECTOR, SoundHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":92},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータを設定する","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_Set3DReverbParamSoundMem(","highlight_start":1,"highlight_end":40},{"text":"        SOUND3D_REVERB_PARAM: *const XAUDIO2FX_REVERB_PARAMETERS,","highlight_start":1,"highlight_end":66},{"text":"        SoundHandle: c_int,","highlight_start":1,"highlight_end":28},{"text":"    ) -> c_int;","highlight_start":1,"highlight_end":16},{"text":"    /// メモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータをプリセットを使用して設定する","highlight_start":1,"highlight_end":60},{"text":"    //pub fn dx_Set3DPresetReverbParamSoundMem() -> c_int;","highlight_start":1,"highlight_end":59},{"text":"    /// ３Ｄサウンド用のプリセットのリバーブエフェクトパラメータを取得する","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_Get3DPresetReverbParamSoundMem() -> c_int;","highlight_start":1,"highlight_end":59},{"text":"    /// 全てのメモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータを設定する","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_Set3DReverbParamSoundMemAll() -> c_int;","highlight_start":1,"highlight_end":56},{"text":"    /// 全てのメモリに読み込んだ音データの３Ｄサウンド用のリバーブエフェクトパラメータをプリセットを使用して設定する","highlight_start":1,"highlight_end":63},{"text":"    //pub fn dx_Set3DPresetReverbParamSoundMemAll() -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// 次に作成するメモリに読み込む音データを３Ｄサウンド用にするかどうかを設定する","highlight_start":1,"highlight_end":47},{"text":"    //pub fn dx_SetCreate3DSoundFlag() -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// サウンドの再生にXAudio2を使用するかどうかを設定する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_SetEnableXAudioFlag() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"    /// ３Ｄ空間の１メートルに相当する距離を設定する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_Set3DSoundOneMetre() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// ３Ｄサウンドのリスナーの位置とリスナーの前方位置を設定する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_Set3DSoundListenerPosAndFrontPos_UpVecY() -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// ３Ｄサウンドのリスナーの位置とリスナーの前方位置とリスナーの上方向を設定する","highlight_start":1,"highlight_end":47},{"text":"    //pub fn dx_Set3DSoundListenerPosAndFrontPosAndUpVec() -> c_int;","highlight_start":1,"highlight_end":69},{"text":"    /// ３Ｄサウンドのリスナーの移動速度を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_Set3DSoundListenerVelocity() -> c_int;","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 音楽再生関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルを演奏(再生)する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_PlayMusic(FileName:*const c_char ,PlayType:c_int) -> c_int;","highlight_start":1,"highlight_end":76},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルが演奏(再生)中かの情報を取得する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_CheckMusic() -> c_int;","highlight_start":1,"highlight_end":37},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルの演奏(再生)停止","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_StopMusic() -> c_int;","highlight_start":1,"highlight_end":36},{"text":"    /// ＭＩＤＩ又はＭＰ３ファイルの演奏(再生)の音量を設定する","highlight_start":1,"highlight_end":37},{"text":"    pub fn dx_SetVolumeMusic(Volume: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ウエイト関係の関数","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 指定の時間だけ処理をとめる","highlight_start":1,"highlight_end":22},{"text":"    pub fn dx_WaitTimer(WaitTime: c_int) -> c_int;","highlight_start":1,"highlight_end":51},{"text":"    /// ディスプレイの垂直同期信号を指定回数待つ","highlight_start":1,"highlight_end":29},{"text":"    //pub fn dx_WaitVSync() -> c_int;","highlight_start":1,"highlight_end":38},{"text":"    /// キーの入力待ち","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_WaitKey() -> c_int;","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 時間関係の関数","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ミリ秒単位の精度を持つカウンタの現在値を得る","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_GetNowCount() -> c_int;","highlight_start":1,"highlight_end":38},{"text":"    /// GetNowCountの高精度バージョン","highlight_start":1,"highlight_end":29},{"text":"    pub fn dx_GetNowHiPerformanceCount() -> i64;","highlight_start":1,"highlight_end":49},{"text":"    /// 現在時刻を取得する","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_GetDateTime() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 乱数取得関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 乱数を取得する","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_GetRand(rand_max: c_int) -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// 乱数の初期値を設定する","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_SRand(seed: c_int) -> c_int;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ウインドウモード関係","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ウインドウモード・フルスクリーンモードの変更を行う","highlight_start":1,"highlight_end":34},{"text":"    pub fn dx_ChangeWindowMode(flag: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    /// ウインドウのタイトルを変更する","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_SetMainWindowText(WindowText: *const c_char) -> c_int;","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ウインドウのアイコンを変更する","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SetWindowIconID(ID: c_int) -> c_int;","highlight_start":1,"highlight_end":51},{"text":"    /// ウインドウモードの時にウインドウのサイズを自由に変更出来るようにするかどうかを設定する","highlight_start":1,"highlight_end":52},{"text":"    pub fn dx_SetWindowSizeChangeEnableFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":67},{"text":"    /// ウインドウモードの時のウインドウの大きさと描画画面の大きさの比率を設定する","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_SetWindowSizeExtendRate(ExRateX: f64, ExRateY: f64) -> c_int;","highlight_start":1,"highlight_end":76},{"text":"    // 通信関係","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 他のマシンに接続する","highlight_start":1,"highlight_end":19},{"text":"    pub fn dx_ConnectNetWork(IPData: IPDATA, Port: c_int) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// 接続を終了する","highlight_start":1,"highlight_end":16},{"text":"    pub fn dx_CloseNetWork(NetHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":55},{"text":"    /// 接続を受け付けられる状態にする","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_PreparationListenNetWork(Port: c_int) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"    /// 接続を受け付けている状態を解除する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_StopListenNetWork() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"    /// データを送信する","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_NetWorkSend(NetHandle: c_int, Buffer: *mut c_void, Length: c_int) -> c_int;","highlight_start":1,"highlight_end":90},{"text":"    /// 受信データ一時記憶バッファに溜まっているデータの量を得る","highlight_start":1,"highlight_end":37},{"text":"    //pub fn dx_GetNetWorkDataLength() -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// 未送信のデータの量を得る","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_GetNetWorkSendDataLength() -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// 受信データ一時記憶バッファに溜まっているデータを取得する","highlight_start":1,"highlight_end":37},{"text":"    //pub fn dx_NetWorkRecv() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// 受信したデータを読み込む、読み込んだデータはバッファから削除されない","highlight_start":1,"highlight_end":43},{"text":"    //pub fn dx_NetWorkRecvToPeek() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"    /// 新たに確立した接続を示すネットワークハンドルを得る","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_GetNewAcceptNetWork() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"    /// 新たに破棄された接続を示すネットワークハンドルを得る","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_GetLostNetWork() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// 接続状態を取得する","highlight_start":1,"highlight_end":18},{"text":"    //pub fn dx_GetNetWorkAcceptState() -> c_int;","highlight_start":1,"highlight_end":50},{"text":"    /// 接続先のＩＰアドレスを得る","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_GetNetWorkIP() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// ＵＤＰを使用して通信するためのソケットを作成する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_MakeUDPSocket() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ＵＤＰを使用して通信するためのソケットを削除する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_DeleteUDPSocket() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"    /// ＵＤＰを使用して他のマシンにデータを送信する","highlight_start":1,"highlight_end":31},{"text":"    //pub fn dx_NetWorkSendUDP() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// ＵＤＰを使用して他のマシンからのデータを受信する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_NetWorkRecvUDP() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// ＵＤＰを使用した他のマシンから受信データがあるかどうかを取得する","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_CheckNetWorkRecvUDP() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ファイル読み込み関係","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ファイルを開く","highlight_start":1,"highlight_end":16},{"text":"    //pub fn dx_FileRead_open(FilePath: *mut c_char, ASync: c_int) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"    /// ファイルのサイズを得る","highlight_start":1,"highlight_end":20},{"text":"    //pub fn dx_FileRead_size() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ファイルを閉じる","highlight_start":1,"highlight_end":17},{"text":"    pub fn dx_FileRead_close(FileHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// ファイルポインタの位置を得る","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_FileRead_tell() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ファイルポインタの位置を変更する","highlight_start":1,"highlight_end":25},{"text":"    //pub fn dx_FileRead_seek() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ファイルからデータを読み込む","highlight_start":1,"highlight_end":23},{"text":"    //pub fn dx_FileRead_read(Buffer: *mut c_void, ReadSize: c_int, FileHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":97},{"text":"    /// ファイルの終端かどうかを調べる","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_FileRead_eof(FileHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":56},{"text":"    /// ファイルから一行読み出す","highlight_start":1,"highlight_end":21},{"text":"    //pub fn dx_FileRead_gets(Buffer:*mut c_char,Num:c_int,FileHandle:c_int) -> c_int;","highlight_start":1,"highlight_end":87},{"text":"    /// ファイルから一文字読み出す","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_FileRead_getc() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ファイルから書式付きデータを読み出す","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_FileRead_scanf() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // ドット単位で画像にアクセスしたい関係","highlight_start":1,"highlight_end":26},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// ＣＰＵで扱うイメージの読み込み","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_LoadSoftImage(FileName:*const c_char) -> c_int;","highlight_start":1,"highlight_end":64},{"text":"    /// ＣＰＵで扱うイメージの読み込み( RGBA8 カラーに変換 )","highlight_start":1,"highlight_end":40},{"text":"    //pub fn dx_LoadARGB8ColorSoftImage(FileName:*const c_char) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    /// ＣＰＵで扱うイメージの読み込み( XGBA8 カラーに変換 )","highlight_start":1,"highlight_end":40},{"text":"    //puFileName:*const c_charb fn dx_LoadXRGB8ColorSoftImage(FileName:*const c_char) -> c_int;","highlight_start":1,"highlight_end":96},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_LoadSoftImageToMem() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み( RGBA8 カラーに変換 )","highlight_start":1,"highlight_end":46},{"text":"    //pub fn dx_LoadARGB8ColorSoftImageToMem() -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// ＣＰＵで扱うイメージのメモリからの読み込み( XGBA8 カラーに変換 )","highlight_start":1,"highlight_end":46},{"text":"    //pub fn dx_LoadXRGB8ColorSoftImageToMem() -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// ＣＰＵで扱うイメージの作成( RGBA8 カラー )","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_MakeARGB8ColorSoftImage() -> c_int;","highlight_start":1,"highlight_end":52},{"text":"    /// ＣＰＵで扱うイメージの作成( XRGB8 カラー )","highlight_start":1,"highlight_end":35},{"text":"    //pub fn dx_MakeXRGB8ColorSoftImage() -> c_int;","highlight_start":1,"highlight_end":52},{"text":"    /// ＣＰＵで扱うイメージの作成( パレット２５６色 カラー )","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_MakePAL8ColorSoftImage() -> c_int;","highlight_start":1,"highlight_end":51},{"text":"    /// ＣＰＵで扱うイメージの解放","highlight_start":1,"highlight_end":22},{"text":"    //pub fn dx_DeleteSoftImage() -> c_int;","highlight_start":1,"highlight_end":44},{"text":"    /// ＣＰＵで扱うイメージを全て解放","highlight_start":1,"highlight_end":24},{"text":"    //pub fn dx_InitSoftImage() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ＣＰＵで扱うイメージのサイズを取得する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GetSoftImageSize() -> c_int;","highlight_start":1,"highlight_end":45},{"text":"    /// ＣＰＵで扱うイメージを指定色で塗りつぶす(各色要素は０～２５５)","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_FillSoftImage() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ＣＰＵで扱うイメージのパレットをセットする(各色要素は０～２５５)","highlight_start":1,"highlight_end":42},{"text":"    //pub fn dx_SetPaletteSoftImage() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"    /// ＣＰＵで扱うイメージのパレットを取得する(各色要素は０～２５５)","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_GetPaletteSoftImage() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"    /// ＣＰＵで扱うイメージの指定座標にドットを描画する(パレット画像用、有効値は０～２５５)","highlight_start":1,"highlight_end":52},{"text":"    //pub fn dx_DrawPixelPalCodeSoftImage() -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    /// ＣＰＵで扱うイメージの指定座標の色コードを取得する(パレット画像用、戻り値は０～２５５)","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_GetPixelPalCodeSoftImage() -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// ＣＰＵで扱うイメージの指定座標にドットを描画する(各色要素は０～２５５)","highlight_start":1,"highlight_end":45},{"text":"    //pub fn dx_DrawPixelSoftImage() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// ＣＰＵで扱うイメージの指定座標の色を取得する(各色要素は０～２５５)","highlight_start":1,"highlight_end":43},{"text":"    //pub fn dx_GetPixelSoftImage() -> c_int;","highlight_start":1,"highlight_end":46},{"text":"    /// ＣＰＵで扱うイメージを別のイメージ上に転送する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_BltSoftImage() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// ＣＰＵで扱うイメージを画面に描画する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_DrawSoftImage() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"    /// ＣＰＵで扱うイメージからグラフィックハンドルを作成する","highlight_start":1,"highlight_end":36},{"text":"    //pub fn dx_CreateGraphFromSoftImage() -> c_int;","highlight_start":1,"highlight_end":53},{"text":"    /// ＣＰＵで扱うイメージから分割グラフィックハンドルを作成する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_CreateDivGraphFromSoftImage() -> c_int;","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 非同期読み込み関係","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 非同期読み込みを行うかどうかを設定する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetUseASyncLoadFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// ハンドルが非同期読み込み中かどうかを取得する","highlight_start":1,"highlight_end":31},{"text":"    pub fn dx_CheckHandleASyncLoad(Handle: c_int) -> c_int;","highlight_start":1,"highlight_end":60},{"text":"    /// 行っている非同期読み込みの数を取得する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_GetASyncLoadNum() -> c_int;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // 文字関係関数","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// 文字列の引数の文字コードを設定する","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetUseCharCodeFormat(char_code_format: c_int) -> c_int;","highlight_start":1,"highlight_end":70},{"text":"    /// 文字列の先頭の文字のバイト数を取得する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_GetCharBytes() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // マイナー関数","highlight_start":1,"highlight_end":14},{"text":"    pub fn dx_SetUseBackBufferTransColorFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"    /// ウインドウがアクティブではない状態でも処理を続行するか、フラグをセットする","highlight_start":1,"highlight_end":46},{"text":"    pub fn dx_SetAlwaysRunFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    /// ログ出力を行うか否かのセット","highlight_start":1,"highlight_end":23},{"text":"    pub fn dx_SetOutApplicationLogValidFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":67},{"text":"    /// ＤＸアーカイブファイルの読み込み機能を使うかどうかを設定する","highlight_start":1,"highlight_end":39},{"text":"    pub fn dx_SetUseDXArchiveFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// 検索するＤＸアーカイブファイルの拡張子を変更する","highlight_start":1,"highlight_end":33},{"text":"    //pub fn dx_SetDXArchiveExtension(Extension: *const c_char) -> c_int;","highlight_start":1,"highlight_end":74},{"text":"    /// ＤＸアーカイブファイルの鍵文字列を設定する","highlight_start":1,"highlight_end":30},{"text":"    //pub fn dx_SetDXArchiveKeyString() -> c_int;","highlight_start":1,"highlight_end":50},{"text":"    /// ６４０ｘ４８０の画面で３２０ｘ２４０の画面解像度にするかどうかのフラグをセットする","highlight_start":1,"highlight_end":50},{"text":"    pub fn dx_SetEmulation320x240(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":57},{"text":"    /// ３Ｄ機能を使うか、のフラグをセット","highlight_start":1,"highlight_end":26},{"text":"    pub fn dx_SetUse3DFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":50},{"text":"    /// ScreenFlip関数実行時にＣＲＴの垂直同期信号待ちをするかのフラグセット","highlight_start":1,"highlight_end":48},{"text":"    pub fn dx_SetWaitVSyncFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":54},{"text":"    // 　描画の際のブレンドモードを詳細に設定する","highlight_start":1,"highlight_end":29},{"text":"    pub fn SetDrawCustomBlendMode(","highlight_start":1,"highlight_end":35},{"text":"        BlendEnable: c_int,","highlight_start":1,"highlight_end":28},{"text":"        SrcBlendRGB: c_int,","highlight_start":1,"highlight_end":28},{"text":"        DestBlendRGB: c_int,","highlight_start":1,"highlight_end":29},{"text":"        BlendOpRGB: c_int,","highlight_start":1,"highlight_end":27},{"text":"        SrcBlendA: c_int,","highlight_start":1,"highlight_end":26},{"text":"        DestBlendA: c_int,","highlight_start":1,"highlight_end":27},{"text":"        BlendOpA: c_int,","highlight_start":1,"highlight_end":25},{"text":"        BlendParam: c_int,","highlight_start":1,"highlight_end":27},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    /// 必要ならグラフィックの分割を行うか否かを設定する","highlight_start":1,"highlight_end":33},{"text":"    pub fn dx_SetUseDivGraphFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":56},{"text":"    /// フォーカスが他のソフトに移っているときにバックグラウンドに表示するグラフィックを設定する","highlight_start":1,"highlight_end":53},{"text":"    //pub fn dx_LoadPauseGraph(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"    /// 裏画面の内容を表画面にコピーする","highlight_start":1,"highlight_end":25},{"text":"    pub fn dx_ScreenCopy() -> c_int;","highlight_start":1,"highlight_end":37},{"text":"    /// 画面の色ビット数を得る","highlight_start":1,"highlight_end":20},{"text":"    pub fn dx_GetColorBitDepth() -> c_int;","highlight_start":1,"highlight_end":43},{"text":"    /// 現在描画対象になっている画面をＢＭＰ形式で保存する","highlight_start":1,"highlight_end":34},{"text":"    //pub fn dx_SaveDrawScreen(x1: c_int, y1: c_int, x2: c_int, y2: c_int, FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":110},{"text":"    /// 使用可能なフォントの名前を列挙する","highlight_start":1,"highlight_end":26},{"text":"    //pub fn dx_EnumFontName() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    /// 文字列を縦に描画する","highlight_start":1,"highlight_end":19},{"text":"    //pub fn dx_DrawVString() -> c_int;","highlight_start":1,"highlight_end":40},{"text":"    /// フォントハンドルを使用して文字列を縦に描画する","highlight_start":1,"highlight_end":32},{"text":"    //pub fn dx_DrawVStringToHandle() -> c_int;","highlight_start":1,"highlight_end":48},{"text":"    /// メモリ上の画像ファイルイメージからグラフィックハンドルを作成する","highlight_start":1,"highlight_end":41},{"text":"    //pub fn dx_CreateGraphFromMem() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// メモリ上の画像ファイルイメージから既存のグラフィックハンドルにデータを転送する","highlight_start":1,"highlight_end":48},{"text":"    //pub fn dx_ReCreateGraphFromMem() -> c_int;","highlight_start":1,"highlight_end":49},{"text":"    /// 画像ファイルから作成したグラフィックハンドルに再度画像ファイルから画像を読み込む","highlight_start":1,"highlight_end":49},{"text":"    //pub fn dx_ReloadFileGraphAll() -> c_int;","highlight_start":1,"highlight_end":47},{"text":"    /// グラフィックハンドル復元関数を登録する","highlight_start":1,"highlight_end":28},{"text":"    //pub fn dx_SetRestoreGraphCallback() -> c_int;","highlight_start":1,"highlight_end":52},{"text":"    /// 作成する音データの再生形式を設定する","highlight_start":1,"highlight_end":27},{"text":"    //pub fn dx_SetCreateSoundDataType() -> c_int;","highlight_start":1,"highlight_end":51},{"text":"    /// メモリ上の音ファイルイメージからサウンドハンドルを作成する","highlight_start":1,"highlight_end":38},{"text":"    //pub fn dx_LoadSoundMemByMemImage() -> c_int;","highlight_start":1,"highlight_end":51},{"text":"    /// ＭＩＤＩの演奏形態をセットする","highlight_start":1,"highlight_end":24},{"text":"    pub fn dx_SelectMidiMode(mode: c_int) -> c_int;","highlight_start":1,"highlight_end":52},{"text":"    /// カーソルを点滅させるかどうかを設定する","highlight_start":1,"highlight_end":28},{"text":"    pub fn dx_SetKeyInputCursorBrinkFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":64},{"text":"    /// ドラッグアンドドロップを有効化するかどうか設定する。","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_SetDragFileValidFlag(Flag: c_int) -> c_int;","highlight_start":1,"highlight_end":58},{"text":"    /// ドラッグアンドドロップされたファイルをひとつ読み出す。","highlight_start":1,"highlight_end":36},{"text":"    pub fn dx_GetDragFilePath(FilePathBuffer: *mut u16) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"    /// ドラッグアンドドロップされたファイルの数を取得する。","highlight_start":1,"highlight_end":35},{"text":"    pub fn dx_GetDragFileNum() -> c_int;","highlight_start":1,"highlight_end":41},{"text":"    // ウィンドウの見た目を変える","highlight_start":1,"highlight_end":21},{"text":"    pub fn dx_SetWindowStyleMode(Mode: c_int) -> c_int;","highlight_start":1,"highlight_end":56},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"not a free function, impl method or static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":1745,"byte_end":1757,"line_start":52,"line_end":52,"column_start":1,"column_end":13,"is_primary":true,"text":[{"text":"#[no_mangle]","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_attributes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: attribute should be applied to a free function, impl method or static\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:52:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m52\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m#[no_mangle]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mextern \"stdcall\" {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // 使用必須関数\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m55\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m56\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// ライブラリの初期化\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1047\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn dx_SetWindowStyleMode(Mode: c_int) -> c_int;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1048\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mnot a free function, impl method or static\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_attributes)]` on by default\u001b[0m\n\n"}
{"message":"attribute should be applied to a free function, impl method or static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":50881,"byte_end":54877,"line_start":1063,"line_end":1164,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    extern \"stdcall\" {","highlight_start":5,"highlight_end":23},{"text":"        pub fn dx_ClearDrawScreen(ClearRect: *mut RECT) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"        pub fn dx_LoadGraph(FileName: *const c_char, NotUse3DFlag: c_int) -> c_int;","highlight_start":1,"highlight_end":84},{"text":"        pub fn dx_PlaySoundFile(FileName: *const c_char, PlayType: c_int) -> c_int;","highlight_start":1,"highlight_end":84},{"text":"        pub fn dx_LoadSoundMem(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"        pub fn dx_DrawString(x: c_int, y: c_int, String: *const c_char, Color: Color) -> c_int;","highlight_start":1,"highlight_end":96},{"text":"        pub fn dx_MV1LoadModel(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":66},{"text":"        pub fn dx_ChangeFont(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":64},{"text":"        pub fn dx_CreateFontToHandle(","highlight_start":1,"highlight_end":38},{"text":"            FontName: *const c_char,","highlight_start":1,"highlight_end":37},{"text":"            Size: c_int,","highlight_start":1,"highlight_end":25},{"text":"            Thick: c_int,","highlight_start":1,"highlight_end":26},{"text":"            FontType: c_int,","highlight_start":1,"highlight_end":29},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"        pub fn dx_DrawStringToHandle(","highlight_start":1,"highlight_end":38},{"text":"            x: c_int,","highlight_start":1,"highlight_end":22},{"text":"            y: c_int,","highlight_start":1,"highlight_end":22},{"text":"            String: *const c_char,","highlight_start":1,"highlight_end":35},{"text":"            Color: Color,","highlight_start":1,"highlight_end":26},{"text":"            FontHandle: c_int,","highlight_start":1,"highlight_end":31},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"        pub fn dx_LoadFontDataToHandle(FileName: *const c_char, EdgeSize: c_int) -> c_int;","highlight_start":1,"highlight_end":91},{"text":"        pub fn dx_SetDXArchiveExtension(Extension: *const c_char) -> c_int;","highlight_start":1,"highlight_end":76},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn dx_SetDXArchiveKeyString(KeyString: *const c_char) -> c_int;","highlight_start":1,"highlight_end":76},{"text":"        pub fn dx_SaveDrawScreen(","highlight_start":1,"highlight_end":34},{"text":"            x1: c_int,","highlight_start":1,"highlight_end":23},{"text":"            y1: c_int,","highlight_start":1,"highlight_end":23},{"text":"            x2: c_int,","highlight_start":1,"highlight_end":23},{"text":"            y2: c_int,","highlight_start":1,"highlight_end":23},{"text":"            FileName: *const c_char,","highlight_start":1,"highlight_end":37},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"        pub fn dx_SetMainWindowText(WindowText: *const c_char) -> c_int;","highlight_start":1,"highlight_end":73},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn dx_FileRead_gets(Buffer: *mut c_char, Num: c_int, FileHandle: c_int) -> c_int;","highlight_start":1,"highlight_end":94},{"text":"        pub fn dx_FileRead_open(FilePath: *const c_char, ASync: c_int) -> c_int;","highlight_start":1,"highlight_end":81},{"text":"        pub fn dx_LoadDivGraph(","highlight_start":1,"highlight_end":32},{"text":"            FileName: *const c_char,","highlight_start":1,"highlight_end":37},{"text":"            AllNum: c_int,","highlight_start":1,"highlight_end":27},{"text":"            XNum: c_int,","highlight_start":1,"highlight_end":25},{"text":"            YNum: c_int,","highlight_start":1,"highlight_end":25},{"text":"            XSize: c_int,","highlight_start":1,"highlight_end":26},{"text":"            YSize: c_int,","highlight_start":1,"highlight_end":26},{"text":"            HandleBuf: *mut c_int,","highlight_start":1,"highlight_end":35},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"        pub fn dx_LoadGraphScreen(","highlight_start":1,"highlight_end":35},{"text":"            x: c_int,","highlight_start":1,"highlight_end":22},{"text":"            y: c_int,","highlight_start":1,"highlight_end":22},{"text":"            GraphName: *const c_char,","highlight_start":1,"highlight_end":38},{"text":"            TransFlag: c_int,","highlight_start":1,"highlight_end":30},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"        pub fn dx_GetGraphSize(","highlight_start":1,"highlight_end":32},{"text":"            GrHandle: c_int,","highlight_start":1,"highlight_end":29},{"text":"            SizeXBuf: *mut c_int,","highlight_start":1,"highlight_end":34},{"text":"            SizeYBuf: *mut c_int,","highlight_start":1,"highlight_end":34},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"        pub fn dx_LoadBlendGraph(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"        pub fn dx_GetDateTime(DateBuf: *mut DATEDATA) -> c_int;","highlight_start":1,"highlight_end":64},{"text":"        pub fn dx_GetDrawStringWidth(String: *const c_char, StrLen: c_int) -> c_int;","highlight_start":1,"highlight_end":85},{"text":"        pub fn dx_GetDrawStringWidthToHandle(","highlight_start":1,"highlight_end":46},{"text":"            String: *const c_char,","highlight_start":1,"highlight_end":35},{"text":"            StrLen: c_int,","highlight_start":1,"highlight_end":27},{"text":"            FontHandle: c_int,","highlight_start":1,"highlight_end":31},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn dx_GetFontStateToHandle(","highlight_start":1,"highlight_end":40},{"text":"            FontName: *const c_char,","highlight_start":1,"highlight_end":37},{"text":"            Size: *mut c_int,","highlight_start":1,"highlight_end":30},{"text":"            Thick: *mut c_int,","highlight_start":1,"highlight_end":31},{"text":"            FontHandle: c_int,","highlight_start":1,"highlight_end":31},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn dx_GetScreenState(","highlight_start":1,"highlight_end":34},{"text":"            SizeX: *mut c_int,","highlight_start":1,"highlight_end":31},{"text":"            SizeY: *mut c_int,","highlight_start":1,"highlight_end":31},{"text":"            ColorBitDepth: *mut c_int,","highlight_start":1,"highlight_end":39},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"        pub fn dx_PlayMovie(FileName: *const c_char, ExRate: c_int, PlayType: c_int) -> c_int;","highlight_start":1,"highlight_end":95},{"text":"        pub fn dx_LoadMask(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":62},{"text":"        pub fn dx_LoadDivMask(","highlight_start":1,"highlight_end":31},{"text":"            FileName: *const c_char,","highlight_start":1,"highlight_end":37},{"text":"            AllNum: c_int,","highlight_start":1,"highlight_end":27},{"text":"            XNum: c_int,","highlight_start":1,"highlight_end":25},{"text":"            YNum: c_int,","highlight_start":1,"highlight_end":25},{"text":"            XSize: c_int,","highlight_start":1,"highlight_end":26},{"text":"            YSize: c_int,","highlight_start":1,"highlight_end":26},{"text":"            HandleBuf: *mut c_int,","highlight_start":1,"highlight_end":35},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"        pub fn dx_GetMaskSize(","highlight_start":1,"highlight_end":31},{"text":"            WidthBuf: *mut c_int,","highlight_start":1,"highlight_end":34},{"text":"            HeightBuf: *mut c_int,","highlight_start":1,"highlight_end":35},{"text":"            MaskHandle: c_int,","highlight_start":1,"highlight_end":31},{"text":"        ) -> c_int;","highlight_start":1,"highlight_end":20},{"text":"        pub fn dx_GetMousePoint(XBuf: *mut c_int, YBuf: *mut c_int) -> c_int;","highlight_start":1,"highlight_end":78},{"text":"        pub fn dx_PlayMusic(FileName: *const c_char, PlayType: c_int) -> c_int;","highlight_start":1,"highlight_end":80},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub fn dx_LoadPauseGraph(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":68},{"text":"        pub fn dx_LoadSoftImage(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":67},{"text":"        pub fn dx_LoadARGB8ColorSoftImage(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"        pub fn dx_LoadXRGB8ColorSoftImage(FileName: *const c_char) -> c_int;","highlight_start":1,"highlight_end":77},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"not a free function, impl method or static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":50863,"byte_end":50875,"line_start":1062,"line_end":1062,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: attribute should be applied to a free function, impl method or static\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1062:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1062\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1063\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    extern \"stdcall\" {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1064\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn dx_ClearDrawScreen(ClearRect: *mut RECT) -> c_int;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn dx_LoadGraph(FileName: *const c_char, NotUse3DFlag: c_int) -> c_int;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1066\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub fn dx_PlaySoundFile(FileName: *const c_char, PlayType: c_int) -> c_int;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mnot a free function, impl method or static\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\n"}
{"message":"attribute should be applied to a free function, impl method or static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"src\\dxlib.rs","byte_start":54936,"byte_end":55027,"line_start":1168,"line_end":1170,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    extern \"cdecl\" {","highlight_start":5,"highlight_end":21},{"text":"        //pub fn dx_DrawFormatString(x:c_int,y:c_int,ck\\olor:\\\\\\);","highlight_start":1,"highlight_end":67},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":"not a free function, impl method or static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":54918,"byte_end":54930,"line_start":1167,"line_end":1167,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: attribute should be applied to a free function, impl method or static\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:1167:5\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    extern \"cdecl\" {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        //pub fn dx_DrawFormatString(x:c_int,y:c_int,ck\\olor:\\\\\\);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_____-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mnot a free function, impl method or static\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\n"}
{"message":"not all trait items implemented, missing: `to_tchar`","code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\dxlib.rs","byte_start":1090,"byte_end":1112,"line_start":36,"line_end":36,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"impl Encode for String {","highlight_start":1,"highlight_end":23}],"label":"missing `to_tchar` in implementation","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":442,"byte_end":471,"line_start":17,"line_end":17,"column_start":5,"column_end":34,"is_primary":false,"text":[{"text":"    fn to_tchar(&self)->Vec<u16>;","highlight_start":5,"highlight_end":34}],"label":"`to_tchar` from trait","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"implement the missing item: `fn to_tchar(&self) -> Vec<u16> { todo!() }`","code":null,"level":"help","spans":[{"file_name":"src\\dxlib.rs","byte_start":1608,"byte_end":1608,"line_start":47,"line_end":47,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"}","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"fn to_tchar(&self) -> Vec<u16> { todo!() }\n","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0046]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: not all trait items implemented, missing: `to_tchar`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:36:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_tchar(&self)->Vec<u16>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`to_tchar` from trait\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl Encode for String {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmissing `to_tchar` in implementation\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\dxlib.rs","byte_start":1003,"byte_end":1011,"line_start":31,"line_end":31,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"    fn to_tchar(&self)->Vec<u16>{","highlight_start":25,"highlight_end":33}],"label":"expected `Vec<u16>`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\dxlib.rs","byte_start":986,"byte_end":994,"line_start":31,"line_end":31,"column_start":8,"column_end":16,"is_primary":false,"text":[{"text":"    fn to_tchar(&self)->Vec<u16>{","highlight_start":8,"highlight_end":16}],"label":"implicitly returns `()` as its body has no tail or `return` expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `Vec<u16>`\nfound unit type `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\dxlib.rs:31:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn to_tchar(&self)->Vec<u16>{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Vec<u16>`, found `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mimplicitly returns `()` as its body has no tail or `return` expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mVec<u16>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m           found unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors; 13 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 3 previous errors; 13 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0046, E0308, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0046, E0308, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0046`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0046`.\u001b[0m\n"}
